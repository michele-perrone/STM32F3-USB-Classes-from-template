
USB_CDC_from_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008148  08008148  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008148  08008148  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008148  08008148  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008148  08008148  00018148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800814c  0800814c  0001814c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00001274  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200013f0  200013f0  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000181bb  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003595  00000000  00000000  00038367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  0003b900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000da0  00000000  00000000  0003c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020367  00000000  00000000  0003d5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f79  00000000  00000000  0005d91f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0d5b  00000000  00000000  00072898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001235f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d08  00000000  00000000  00123648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080080b8 	.word	0x080080b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	080080b8 	.word	0x080080b8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa8a 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80a 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8e8 	bl	80003a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f868 	bl	80002ac <MX_I2C1_Init>
  MX_SPI1_Init();
 80001dc:	f000 f8a6 	bl	800032c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80001e0:	f007 fa9a 	bl	8007718 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e4:	e7fe      	b.n	80001e4 <main+0x1c>
	...

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b09e      	sub	sp, #120	; 0x78
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f007 ff56 	bl	80080a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
 800020a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800020c:	463b      	mov	r3, r7
 800020e:	223c      	movs	r2, #60	; 0x3c
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f007 ff48 	bl	80080a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000218:	2303      	movs	r3, #3
 800021a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800021c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000220:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022a:	2310      	movs	r3, #16
 800022c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000236:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000238:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800023c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000242:	4618      	mov	r0, r3
 8000244:	f002 fb6a 	bl	800291c <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800024e:	f000 f929 	bl	80004a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000268:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f003 fa5c 	bl	800372c <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800027a:	f000 f913 	bl	80004a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800027e:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <SystemClock_Config+0xc0>)
 8000280:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000282:	2300      	movs	r3, #0
 8000284:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000286:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800028a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028c:	463b      	mov	r3, r7
 800028e:	4618      	mov	r0, r3
 8000290:	f003 fc32 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800029a:	f000 f903 	bl	80004a4 <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3778      	adds	r7, #120	; 0x78
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	00020020 	.word	0x00020020

080002ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <MX_I2C1_Init+0x74>)
 80002b2:	4a1c      	ldr	r2, [pc, #112]	; (8000324 <MX_I2C1_Init+0x78>)
 80002b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <MX_I2C1_Init+0x74>)
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <MX_I2C1_Init+0x7c>)
 80002ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <MX_I2C1_Init+0x74>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <MX_I2C1_Init+0x74>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c8:	4b15      	ldr	r3, [pc, #84]	; (8000320 <MX_I2C1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_I2C1_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_I2C1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_I2C1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002e6:	480e      	ldr	r0, [pc, #56]	; (8000320 <MX_I2C1_Init+0x74>)
 80002e8:	f000 fd06 	bl	8000cf8 <HAL_I2C_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002f2:	f000 f8d7 	bl	80004a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002f6:	2100      	movs	r1, #0
 80002f8:	4809      	ldr	r0, [pc, #36]	; (8000320 <MX_I2C1_Init+0x74>)
 80002fa:	f000 fd8c 	bl	8000e16 <HAL_I2CEx_ConfigAnalogFilter>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000304:	f000 f8ce 	bl	80004a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000308:	2100      	movs	r1, #0
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_I2C1_Init+0x74>)
 800030c:	f000 fdce 	bl	8000eac <HAL_I2CEx_ConfigDigitalFilter>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000316:	f000 f8c5 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200003bc 	.word	0x200003bc
 8000324:	40005400 	.word	0x40005400
 8000328:	2000090e 	.word	0x2000090e

0800032c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000332:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <MX_SPI1_Init+0x78>)
 8000334:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800033c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800033e:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000346:	f44f 7240 	mov.w	r2, #768	; 0x300
 800034a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_SPI1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_SPI1_Init+0x74>)
 800035a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800035e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000362:	2208      	movs	r2, #8
 8000364:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_SPI1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_SPI1_Init+0x74>)
 800037a:	2207      	movs	r2, #7
 800037c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000386:	2208      	movs	r2, #8
 8000388:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_SPI1_Init+0x74>)
 800038c:	f003 fd64 	bl	8003e58 <HAL_SPI_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000396:	f000 f885 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000408 	.word	0x20000408
 80003a4:	40013000 	.word	0x40013000

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	; 0x28
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003be:	4b37      	ldr	r3, [pc, #220]	; (800049c <MX_GPIO_Init+0xf4>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a36      	ldr	r2, [pc, #216]	; (800049c <MX_GPIO_Init+0xf4>)
 80003c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b34      	ldr	r3, [pc, #208]	; (800049c <MX_GPIO_Init+0xf4>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003d2:	613b      	str	r3, [r7, #16]
 80003d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	4b31      	ldr	r3, [pc, #196]	; (800049c <MX_GPIO_Init+0xf4>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a30      	ldr	r2, [pc, #192]	; (800049c <MX_GPIO_Init+0xf4>)
 80003dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b2e      	ldr	r3, [pc, #184]	; (800049c <MX_GPIO_Init+0xf4>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ee:	4b2b      	ldr	r3, [pc, #172]	; (800049c <MX_GPIO_Init+0xf4>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a2a      	ldr	r2, [pc, #168]	; (800049c <MX_GPIO_Init+0xf4>)
 80003f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b28      	ldr	r3, [pc, #160]	; (800049c <MX_GPIO_Init+0xf4>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b25      	ldr	r3, [pc, #148]	; (800049c <MX_GPIO_Init+0xf4>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a24      	ldr	r2, [pc, #144]	; (800049c <MX_GPIO_Init+0xf4>)
 800040c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <MX_GPIO_Init+0xf4>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041e:	4b1f      	ldr	r3, [pc, #124]	; (800049c <MX_GPIO_Init+0xf4>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a1e      	ldr	r2, [pc, #120]	; (800049c <MX_GPIO_Init+0xf4>)
 8000424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b1c      	ldr	r3, [pc, #112]	; (800049c <MX_GPIO_Init+0xf4>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000436:	2200      	movs	r2, #0
 8000438:	f64f 7108 	movw	r1, #65288	; 0xff08
 800043c:	4818      	ldr	r0, [pc, #96]	; (80004a0 <MX_GPIO_Init+0xf8>)
 800043e:	f000 fc43 	bl	8000cc8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000442:	2337      	movs	r3, #55	; 0x37
 8000444:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000446:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800044a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	4619      	mov	r1, r3
 8000456:	4812      	ldr	r0, [pc, #72]	; (80004a0 <MX_GPIO_Init+0xf8>)
 8000458:	f000 fabc 	bl	80009d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800045c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000460:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2300      	movs	r3, #0
 800046c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	4619      	mov	r1, r3
 8000474:	480a      	ldr	r0, [pc, #40]	; (80004a0 <MX_GPIO_Init+0xf8>)
 8000476:	f000 faad 	bl	80009d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800047a:	2301      	movs	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	4619      	mov	r1, r3
 800048c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000490:	f000 faa0 	bl	80009d4 <HAL_GPIO_Init>

}
 8000494:	bf00      	nop
 8000496:	3728      	adds	r7, #40	; 0x28
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40021000 	.word	0x40021000
 80004a0:	48001000 	.word	0x48001000

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	e7fe      	b.n	80004ac <Error_Handler+0x8>
	...

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <HAL_MspInit+0x44>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <HAL_MspInit+0x44>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <HAL_MspInit+0x44>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <HAL_MspInit+0x44>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <HAL_MspInit+0x44>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_MspInit+0x44>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004e6:	2007      	movs	r0, #7
 80004e8:	f000 fa32 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000

080004f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a17      	ldr	r2, [pc, #92]	; (8000574 <HAL_I2C_MspInit+0x7c>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d127      	bne.n	800056a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <HAL_I2C_MspInit+0x80>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a16      	ldr	r2, [pc, #88]	; (8000578 <HAL_I2C_MspInit+0x80>)
 8000520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <HAL_I2C_MspInit+0x80>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000532:	23c0      	movs	r3, #192	; 0xc0
 8000534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000536:	2312      	movs	r3, #18
 8000538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800053a:	2301      	movs	r3, #1
 800053c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053e:	2303      	movs	r3, #3
 8000540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000542:	2304      	movs	r3, #4
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4619      	mov	r1, r3
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <HAL_I2C_MspInit+0x84>)
 800054e:	f000 fa41 	bl	80009d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_I2C_MspInit+0x80>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <HAL_I2C_MspInit+0x80>)
 8000558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_I2C_MspInit+0x80>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800056a:	bf00      	nop
 800056c:	3728      	adds	r7, #40	; 0x28
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40005400 	.word	0x40005400
 8000578:	40021000 	.word	0x40021000
 800057c:	48000400 	.word	0x48000400

08000580 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a17      	ldr	r2, [pc, #92]	; (80005fc <HAL_SPI_MspInit+0x7c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d128      	bne.n	80005f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <HAL_SPI_MspInit+0x80>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a16      	ldr	r2, [pc, #88]	; (8000600 <HAL_SPI_MspInit+0x80>)
 80005a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <HAL_SPI_MspInit+0x80>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <HAL_SPI_MspInit+0x80>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a10      	ldr	r2, [pc, #64]	; (8000600 <HAL_SPI_MspInit+0x80>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_SPI_MspInit+0x80>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80005d2:	23e0      	movs	r3, #224	; 0xe0
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d6:	2302      	movs	r3, #2
 80005d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005de:	2303      	movs	r3, #3
 80005e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005e2:	2305      	movs	r3, #5
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f000 f9f0 	bl	80009d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005f4:	bf00      	nop
 80005f6:	3728      	adds	r7, #40	; 0x28
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40013000 	.word	0x40013000
 8000600:	40021000 	.word	0x40021000

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <NMI_Handler+0x4>

0800060a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <MemManage_Handler+0x4>

08000616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <BusFault_Handler+0x4>

0800061c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <UsageFault_Handler+0x4>

08000622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000650:	f000 f88e 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800065e:	f000 fd75 	bl	800114c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20001104 	.word	0x20001104

0800066c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <SystemInit+0x20>)
 8000672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <SystemInit+0x20>)
 8000678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800067c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000696:	490e      	ldr	r1, [pc, #56]	; (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ac:	4c0b      	ldr	r4, [pc, #44]	; (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ba:	f7ff ffd7 	bl	800066c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006be:	f007 fccf 	bl	8008060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006c2:	f7ff fd81 	bl	80001c8 <main>

080006c6 <LoopForever>:

LoopForever:
    b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80006d4:	08008150 	.word	0x08008150
  ldr r2, =_sbss
 80006d8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80006dc:	200013f0 	.word	0x200013f0

080006e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_2_IRQHandler>
	...

080006e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <HAL_Init+0x28>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <HAL_Init+0x28>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 f92b 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 f808 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000700:	f7ff fed6 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_InitTick+0x54>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_InitTick+0x58>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f943 	bl	80009ba <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e00e      	b.n	800075c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d80a      	bhi.n	800075a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800074c:	f000 f90b 	bl	8000966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <HAL_InitTick+0x5c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000000 	.word	0x20000000
 8000768:	20000008 	.word	0x20000008
 800076c:	20000004 	.word	0x20000004

08000770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x20>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_IncTick+0x24>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <HAL_IncTick+0x24>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000008 	.word	0x20000008
 8000794:	2000046c 	.word	0x2000046c

08000798 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;  
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <HAL_GetTick+0x14>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	2000046c 	.word	0x2000046c

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4907      	ldr	r1, [pc, #28]	; (800084c <__NVIC_EnableIRQ+0x38>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100

08000850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	2b00      	cmp	r3, #0
 8000862:	db0a      	blt.n	800087a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	490c      	ldr	r1, [pc, #48]	; (800089c <__NVIC_SetPriority+0x4c>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	0112      	lsls	r2, r2, #4
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	440b      	add	r3, r1
 8000874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000878:	e00a      	b.n	8000890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4908      	ldr	r1, [pc, #32]	; (80008a0 <__NVIC_SetPriority+0x50>)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	3b04      	subs	r3, #4
 8000888:	0112      	lsls	r2, r2, #4
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	440b      	add	r3, r1
 800088e:	761a      	strb	r2, [r3, #24]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f1c3 0307 	rsb	r3, r3, #7
 80008be:	2b04      	cmp	r3, #4
 80008c0:	bf28      	it	cs
 80008c2:	2304      	movcs	r3, #4
 80008c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3304      	adds	r3, #4
 80008ca:	2b06      	cmp	r3, #6
 80008cc:	d902      	bls.n	80008d4 <NVIC_EncodePriority+0x30>
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3b03      	subs	r3, #3
 80008d2:	e000      	b.n	80008d6 <NVIC_EncodePriority+0x32>
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43da      	mvns	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	401a      	ands	r2, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43d9      	mvns	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	4313      	orrs	r3, r2
         );
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3724      	adds	r7, #36	; 0x24
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800091c:	d301      	bcc.n	8000922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091e:	2301      	movs	r3, #1
 8000920:	e00f      	b.n	8000942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <SysTick_Config+0x40>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092a:	210f      	movs	r1, #15
 800092c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000930:	f7ff ff8e 	bl	8000850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <SysTick_Config+0x40>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <SysTick_Config+0x40>)
 800093c:	2207      	movs	r2, #7
 800093e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff29 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000978:	f7ff ff3e 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 800097c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	6978      	ldr	r0, [r7, #20]
 8000984:	f7ff ff8e 	bl	80008a4 <NVIC_EncodePriority>
 8000988:	4602      	mov	r2, r0
 800098a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff5d 	bl	8000850 <__NVIC_SetPriority>
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff31 	bl	8000814 <__NVIC_EnableIRQ>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffa2 	bl	800090c <SysTick_Config>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e2:	e154      	b.n	8000c8e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	2101      	movs	r1, #1
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	fa01 f303 	lsl.w	r3, r1, r3
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f000 8146 	beq.w	8000c88 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d005      	beq.n	8000a14 <HAL_GPIO_Init+0x40>
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d130      	bne.n	8000a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68da      	ldr	r2, [r3, #12]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	091b      	lsrs	r3, r3, #4
 8000a60:	f003 0201 	and.w	r2, r3, #1
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f003 0303 	and.w	r3, r3, #3
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d017      	beq.n	8000ab2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0303 	and.w	r3, r3, #3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d123      	bne.n	8000b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	08da      	lsrs	r2, r3, #3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	691a      	ldr	r2, [r3, #16]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	f003 0307 	and.w	r3, r3, #7
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	08da      	lsrs	r2, r3, #3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3208      	adds	r2, #8
 8000b00:	6939      	ldr	r1, [r7, #16]
 8000b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2203      	movs	r2, #3
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0203 	and.w	r2, r3, #3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 80a0 	beq.w	8000c88 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b48:	4b58      	ldr	r3, [pc, #352]	; (8000cac <HAL_GPIO_Init+0x2d8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a57      	ldr	r2, [pc, #348]	; (8000cac <HAL_GPIO_Init+0x2d8>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b55      	ldr	r3, [pc, #340]	; (8000cac <HAL_GPIO_Init+0x2d8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b60:	4a53      	ldr	r2, [pc, #332]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	3302      	adds	r3, #2
 8000b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	220f      	movs	r2, #15
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b8a:	d019      	beq.n	8000bc0 <HAL_GPIO_Init+0x1ec>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a49      	ldr	r2, [pc, #292]	; (8000cb4 <HAL_GPIO_Init+0x2e0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d013      	beq.n	8000bbc <HAL_GPIO_Init+0x1e8>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a48      	ldr	r2, [pc, #288]	; (8000cb8 <HAL_GPIO_Init+0x2e4>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d00d      	beq.n	8000bb8 <HAL_GPIO_Init+0x1e4>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a47      	ldr	r2, [pc, #284]	; (8000cbc <HAL_GPIO_Init+0x2e8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d007      	beq.n	8000bb4 <HAL_GPIO_Init+0x1e0>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a46      	ldr	r2, [pc, #280]	; (8000cc0 <HAL_GPIO_Init+0x2ec>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d101      	bne.n	8000bb0 <HAL_GPIO_Init+0x1dc>
 8000bac:	2304      	movs	r3, #4
 8000bae:	e008      	b.n	8000bc2 <HAL_GPIO_Init+0x1ee>
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	e006      	b.n	8000bc2 <HAL_GPIO_Init+0x1ee>
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	e004      	b.n	8000bc2 <HAL_GPIO_Init+0x1ee>
 8000bb8:	2302      	movs	r3, #2
 8000bba:	e002      	b.n	8000bc2 <HAL_GPIO_Init+0x1ee>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e000      	b.n	8000bc2 <HAL_GPIO_Init+0x1ee>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	f002 0203 	and.w	r2, r2, #3
 8000bc8:	0092      	lsls	r2, r2, #2
 8000bca:	4093      	lsls	r3, r2
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd2:	4937      	ldr	r1, [pc, #220]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	3302      	adds	r3, #2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000be0:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <HAL_GPIO_Init+0x2f0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c04:	4a2f      	ldr	r2, [pc, #188]	; (8000cc4 <HAL_GPIO_Init+0x2f0>)
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c0a:	4b2e      	ldr	r3, [pc, #184]	; (8000cc4 <HAL_GPIO_Init+0x2f0>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c2e:	4a25      	ldr	r2, [pc, #148]	; (8000cc4 <HAL_GPIO_Init+0x2f0>)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <HAL_GPIO_Init+0x2f0>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c58:	4a1a      	ldr	r2, [pc, #104]	; (8000cc4 <HAL_GPIO_Init+0x2f0>)
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <HAL_GPIO_Init+0x2f0>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_GPIO_Init+0x2f0>)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	fa22 f303 	lsr.w	r3, r2, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f47f aea3 	bne.w	80009e4 <HAL_GPIO_Init+0x10>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	371c      	adds	r7, #28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010000 	.word	0x40010000
 8000cb4:	48000400 	.word	0x48000400
 8000cb8:	48000800 	.word	0x48000800
 8000cbc:	48000c00 	.word	0x48000c00
 8000cc0:	48001000 	.word	0x48001000
 8000cc4:	40010400 	.word	0x40010400

08000cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cd8:	787b      	ldrb	r3, [r7, #1]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cde:	887a      	ldrh	r2, [r7, #2]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce4:	e002      	b.n	8000cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ce6:	887a      	ldrh	r2, [r7, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e081      	b.n	8000e0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d106      	bne.n	8000d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff fbea 	bl	80004f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2224      	movs	r2, #36	; 0x24
 8000d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0201 	bic.w	r2, r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d107      	bne.n	8000d72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	e006      	b.n	8000d80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d104      	bne.n	8000d92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000db4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691a      	ldr	r2, [r3, #16]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69d9      	ldr	r1, [r3, #28]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a1a      	ldr	r2, [r3, #32]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0201 	orr.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2220      	movs	r2, #32
 8000dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b20      	cmp	r3, #32
 8000e2a:	d138      	bne.n	8000e9e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d101      	bne.n	8000e3a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e032      	b.n	8000ea0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2224      	movs	r2, #36	; 0x24
 8000e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0201 	bic.w	r2, r2, #1
 8000e58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e68:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6819      	ldr	r1, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0201 	orr.w	r2, r2, #1
 8000e88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000e9e:	2302      	movs	r3, #2
  }
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b20      	cmp	r3, #32
 8000ec0:	d139      	bne.n	8000f36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e033      	b.n	8000f38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2224      	movs	r2, #36	; 0x24
 8000edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0201 	bic.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000efe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f042 0201 	orr.w	r2, r2, #1
 8000f20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2220      	movs	r2, #32
 8000f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000f36:	2302      	movs	r3, #2
  }
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f46:	b08b      	sub	sp, #44	; 0x2c
 8000f48:	af06      	add	r7, sp, #24
 8000f4a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e0d0      	b.n	80010f8 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d106      	bne.n	8000f70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f006 fda2 	bl	8007ab4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2203      	movs	r2, #3
 8000f74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 f82d 	bl	8003fdc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e04c      	b.n	8001022 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	3301      	adds	r3, #1
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	b298      	uxth	r0, r3
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3336      	adds	r3, #54	; 0x36
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	3303      	adds	r3, #3
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	3338      	adds	r3, #56	; 0x38
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	333c      	adds	r3, #60	; 0x3c
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3340      	adds	r3, #64	; 0x40
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	3301      	adds	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3ad      	bcc.n	8000f88 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e044      	b.n	80010bc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	440b      	add	r3, r1
 8001040:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	440b      	add	r3, r1
 8001056:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	440b      	add	r3, r1
 8001082:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	3301      	adds	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d3b5      	bcc.n	8001032 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	687e      	ldr	r6, [r7, #4]
 80010ce:	466d      	mov	r5, sp
 80010d0:	f106 0410 	add.w	r4, r6, #16
 80010d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	602b      	str	r3, [r5, #0]
 80010dc:	1d33      	adds	r3, r6, #4
 80010de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e0:	6838      	ldr	r0, [r7, #0]
 80010e2:	f002 ff96 	bl	8004012 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001100 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800110e:	2b01      	cmp	r3, #1
 8001110:	d101      	bne.n	8001116 <HAL_PCD_Start+0x16>
 8001112:	2302      	movs	r3, #2
 8001114:	e016      	b.n	8001144 <HAL_PCD_Start+0x44>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f002 ff43 	bl	8003fae <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001128:	2101      	movs	r1, #1
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f006 ff60 	bl	8007ff0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f004 fef3 	bl	8005f20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f004 feec 	bl	8005f36 <USB_ReadInterrupts>
 800115e:	4603      	mov	r3, r0
 8001160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001168:	d102      	bne.n	8001170 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 faf6 	bl	800175c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f004 fede 	bl	8005f36 <USB_ReadInterrupts>
 800117a:	4603      	mov	r3, r0
 800117c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001184:	d112      	bne.n	80011ac <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001198:	b292      	uxth	r2, r2
 800119a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f006 fd29 	bl	8007bf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011a4:	2100      	movs	r1, #0
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f8c7 	bl	800133a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 fec0 	bl	8005f36 <USB_ReadInterrupts>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011c0:	d10b      	bne.n	80011da <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011d4:	b292      	uxth	r2, r2
 80011d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 fea9 	bl	8005f36 <USB_ReadInterrupts>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011ee:	d10b      	bne.n	8001208 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001202:	b292      	uxth	r2, r2
 8001204:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f004 fe92 	bl	8005f36 <USB_ReadInterrupts>
 8001212:	4603      	mov	r3, r0
 8001214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800121c:	d126      	bne.n	800126c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001226:	b29a      	uxth	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0204 	bic.w	r2, r2, #4
 8001230:	b292      	uxth	r2, r2
 8001232:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800123e:	b29a      	uxth	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0208 	bic.w	r2, r2, #8
 8001248:	b292      	uxth	r2, r2
 800124a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f006 fd0a 	bl	8007c68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800125c:	b29a      	uxth	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001266:	b292      	uxth	r2, r2
 8001268:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f004 fe60 	bl	8005f36 <USB_ReadInterrupts>
 8001276:	4603      	mov	r3, r0
 8001278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800127c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001280:	d126      	bne.n	80012d0 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0208 	orr.w	r2, r2, #8
 8001294:	b292      	uxth	r2, r2
 8001296:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ac:	b292      	uxth	r2, r2
 80012ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0204 	orr.w	r2, r2, #4
 80012c4:	b292      	uxth	r2, r2
 80012c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f006 fcb2 	bl	8007c34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fe2e 	bl	8005f36 <USB_ReadInterrupts>
 80012da:	4603      	mov	r3, r0
 80012dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e4:	d10e      	bne.n	8001304 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012f8:	b292      	uxth	r2, r2
 80012fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f006 fc6b 	bl	8007bda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f004 fe14 	bl	8005f36 <USB_ReadInterrupts>
 800130e:	4603      	mov	r3, r0
 8001310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001318:	d10b      	bne.n	8001332 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800132c:	b292      	uxth	r2, r2
 800132e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_PCD_SetAddress+0x1a>
 8001350:	2302      	movs	r3, #2
 8001352:	e013      	b.n	800137c <HAL_PCD_SetAddress+0x42>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	78fa      	ldrb	r2, [r7, #3]
 8001360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f004 fdc3 	bl	8005ef8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	4608      	mov	r0, r1
 800138e:	4611      	mov	r1, r2
 8001390:	461a      	mov	r2, r3
 8001392:	4603      	mov	r3, r0
 8001394:	70fb      	strb	r3, [r7, #3]
 8001396:	460b      	mov	r3, r1
 8001398:	803b      	strh	r3, [r7, #0]
 800139a:	4613      	mov	r3, r2
 800139c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	da0e      	bge.n	80013c8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2201      	movs	r2, #1
 80013c4:	705a      	strb	r2, [r3, #1]
 80013c6:	e00e      	b.n	80013e6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	f003 0207 	and.w	r2, r3, #7
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80013f2:	883a      	ldrh	r2, [r7, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	78ba      	ldrb	r2, [r7, #2]
 80013fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	785b      	ldrb	r3, [r3, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001410:	78bb      	ldrb	r3, [r7, #2]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d102      	bne.n	800141c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_PCD_EP_Open+0xa6>
 8001426:	2302      	movs	r3, #2
 8001428:	e00e      	b.n	8001448 <HAL_PCD_EP_Open+0xc4>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	4618      	mov	r0, r3
 800143a:	f002 fe0b 	bl	8004054 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001446:	7afb      	ldrb	r3, [r7, #11]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800145c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001460:	2b00      	cmp	r3, #0
 8001462:	da0e      	bge.n	8001482 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2201      	movs	r2, #1
 800147e:	705a      	strb	r2, [r3, #1]
 8001480:	e00e      	b.n	80014a0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	f003 0207 	and.w	r2, r3, #7
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_PCD_EP_Close+0x6a>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e00e      	b.n	80014d8 <HAL_PCD_EP_Close+0x88>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68f9      	ldr	r1, [r7, #12]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 f957 	bl	800477c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	460b      	mov	r3, r1
 80014ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014f0:	7afb      	ldrb	r3, [r7, #11]
 80014f2:	f003 0207 	and.w	r2, r3, #7
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4413      	add	r3, r2
 8001506:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2200      	movs	r2, #0
 800151e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	b2da      	uxtb	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800152c:	7afb      	ldrb	r3, [r7, #11]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6979      	ldr	r1, [r7, #20]
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fb0a 	bl	8004b56 <USB_EPStartXfer>
 8001542:	e005      	b.n	8001550 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6979      	ldr	r1, [r7, #20]
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fb03 	bl	8004b56 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	f003 0207 	and.w	r2, r3, #7
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800157c:	681b      	ldr	r3, [r3, #0]
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	460b      	mov	r3, r1
 8001598:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4413      	add	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2201      	movs	r2, #1
 80015d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015d6:	7afb      	ldrb	r3, [r7, #11]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d106      	bne.n	80015fa <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6979      	ldr	r1, [r7, #20]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 faaf 	bl	8004b56 <USB_EPStartXfer>
 80015f8:	e005      	b.n	8001606 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6979      	ldr	r1, [r7, #20]
 8001600:	4618      	mov	r0, r3
 8001602:	f003 faa8 	bl	8004b56 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	f003 0207 	and.w	r2, r3, #7
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	d901      	bls.n	800162e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e03e      	b.n	80016ac <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800162e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001632:	2b00      	cmp	r3, #0
 8001634:	da0e      	bge.n	8001654 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2201      	movs	r2, #1
 8001650:	705a      	strb	r2, [r3, #1]
 8001652:	e00c      	b.n	800166e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2201      	movs	r2, #1
 8001672:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	b2da      	uxtb	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_PCD_EP_SetStall+0x7e>
 800168a:	2302      	movs	r3, #2
 800168c:	e00e      	b.n	80016ac <HAL_PCD_EP_SetStall+0x9c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fb2c 	bl	8005cfa <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	f003 020f 	and.w	r2, r3, #15
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d901      	bls.n	80016d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e040      	b.n	8001754 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	da0e      	bge.n	80016f8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2201      	movs	r2, #1
 80016f4:	705a      	strb	r2, [r3, #1]
 80016f6:	e00e      	b.n	8001716 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	f003 0207 	and.w	r2, r3, #7
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	b2da      	uxtb	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_PCD_EP_ClrStall+0x82>
 8001732:	2302      	movs	r3, #2
 8001734:	e00e      	b.n	8001754 <HAL_PCD_EP_ClrStall+0xa0>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68f9      	ldr	r1, [r7, #12]
 8001744:	4618      	mov	r0, r3
 8001746:	f004 fb29 	bl	8005d9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b096      	sub	sp, #88	; 0x58
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001764:	e3a9      	b.n	8001eba <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800176e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001772:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001780:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001784:	2b00      	cmp	r3, #0
 8001786:	f040 8164 	bne.w	8001a52 <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800178a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b00      	cmp	r3, #0
 8001794:	d152      	bne.n	800183c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	b29b      	uxth	r3, r3
 800179e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a6:	81fb      	strh	r3, [r7, #14]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	89fb      	ldrh	r3, [r7, #14]
 80017ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3328      	adds	r3, #40	; 0x28
 80017be:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	3302      	adds	r3, #2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	441a      	add	r2, r3
 80017f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017f8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017fa:	2100      	movs	r1, #0
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f006 f9d2 	bl	8007ba6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8355 	beq.w	8001eba <PCD_EP_ISR_Handler+0x75e>
 8001810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	f040 8350 	bne.w	8001eba <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001826:	b2da      	uxtb	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b292      	uxth	r2, r2
 800182e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800183a:	e33e      	b.n	8001eba <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001842:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800184e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001856:	2b00      	cmp	r3, #0
 8001858:	d034      	beq.n	80018c4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001862:	b29b      	uxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4413      	add	r3, r2
 800186e:	3306      	adds	r3, #6
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	4413      	add	r3, r2
 8001878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001884:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001892:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001896:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001898:	b29b      	uxth	r3, r3
 800189a:	f004 fba2 	bl	8005fe2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018aa:	4013      	ands	r3, r2
 80018ac:	823b      	strh	r3, [r7, #16]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	8a3a      	ldrh	r2, [r7, #16]
 80018b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018b8:	b292      	uxth	r2, r2
 80018ba:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f006 f945 	bl	8007b4c <HAL_PCD_SetupStageCallback>
 80018c2:	e2fa      	b.n	8001eba <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018c4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f280 82f6 	bge.w	8001eba <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018da:	4013      	ands	r3, r2
 80018dc:	83fb      	strh	r3, [r7, #30]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	8bfa      	ldrh	r2, [r7, #30]
 80018e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018e8:	b292      	uxth	r2, r2
 80018ea:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4413      	add	r3, r2
 8001900:	3306      	adds	r3, #6
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	4413      	add	r3, r2
 800190a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001916:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d019      	beq.n	8001954 <PCD_EP_ISR_Handler+0x1f8>
 8001920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d015      	beq.n	8001954 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800192e:	6959      	ldr	r1, [r3, #20]
 8001930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001932:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001936:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001938:	b29b      	uxth	r3, r3
 800193a:	f004 fb52 	bl	8005fe2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800193e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	441a      	add	r2, r3
 8001948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800194a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800194c:	2100      	movs	r1, #0
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f006 f90e 	bl	8007b70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 82aa 	bne.w	8001eba <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001974:	b29b      	uxth	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	4413      	add	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d112      	bne.n	80019b4 <PCD_EP_ISR_Handler+0x258>
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001998:	b29a      	uxth	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	801a      	strh	r2, [r3, #0]
 80019b2:	e02f      	b.n	8001a14 <PCD_EP_ISR_Handler+0x2b8>
 80019b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b3e      	cmp	r3, #62	; 0x3e
 80019ba:	d813      	bhi.n	80019e4 <PCD_EP_ISR_Handler+0x288>
 80019bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	647b      	str	r3, [r7, #68]	; 0x44
 80019c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <PCD_EP_ISR_Handler+0x27a>
 80019d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019d2:	3301      	adds	r3, #1
 80019d4:	647b      	str	r3, [r7, #68]	; 0x44
 80019d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019d8:	b29b      	uxth	r3, r3
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	b29a      	uxth	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	e017      	b.n	8001a14 <PCD_EP_ISR_Handler+0x2b8>
 80019e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	095b      	lsrs	r3, r3, #5
 80019ea:	647b      	str	r3, [r7, #68]	; 0x44
 80019ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <PCD_EP_ISR_Handler+0x2a2>
 80019f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fa:	3b01      	subs	r3, #1
 80019fc:	647b      	str	r3, [r7, #68]	; 0x44
 80019fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	029b      	lsls	r3, r3, #10
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a24:	827b      	strh	r3, [r7, #18]
 8001a26:	8a7b      	ldrh	r3, [r7, #18]
 8001a28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a2c:	827b      	strh	r3, [r7, #18]
 8001a2e:	8a7b      	ldrh	r3, [r7, #18]
 8001a30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a34:	827b      	strh	r3, [r7, #18]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	8a7b      	ldrh	r3, [r7, #18]
 8001a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	8013      	strh	r3, [r2, #0]
 8001a50:	e233      	b.n	8001eba <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a66:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f280 80fc 	bge.w	8001c68 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a86:	4013      	ands	r3, r2
 8001a88:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001a9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aa2:	b292      	uxth	r2, r2
 8001aa4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001aa6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001abe:	7b1b      	ldrb	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d125      	bne.n	8001b10 <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3306      	adds	r3, #6
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8001af0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 8092 	beq.w	8001c1e <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b00:	6959      	ldr	r1, [r3, #20]
 8001b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b04:	88da      	ldrh	r2, [r3, #6]
 8001b06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b0a:	f004 fa6a 	bl	8005fe2 <USB_ReadPMA>
 8001b0e:	e086      	b.n	8001c1e <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b12:	78db      	ldrb	r3, [r3, #3]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d10a      	bne.n	8001b2e <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b18:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f9d8 	bl	8001ed6 <HAL_PCD_EP_DB_Receive>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b2c:	e077      	b.n	8001c1e <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	441a      	add	r2, r3
 8001b5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d024      	beq.n	8001bd6 <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001bb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d02e      	beq.n	8001c1e <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc6:	6959      	ldr	r1, [r3, #20]
 8001bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bca:	891a      	ldrh	r2, [r3, #8]
 8001bcc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bd0:	f004 fa07 	bl	8005fe2 <USB_ReadPMA>
 8001bd4:	e023      	b.n	8001c1e <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	3306      	adds	r3, #6
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bfe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001c02:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c10:	6959      	ldr	r1, [r3, #20]
 8001c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c14:	895a      	ldrh	r2, [r3, #10]
 8001c16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c1a:	f004 f9e2 	bl	8005fe2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c26:	441a      	add	r2, r3
 8001c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c34:	441a      	add	r2, r3
 8001c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c38:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <PCD_EP_ISR_Handler+0x4f2>
 8001c42:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d206      	bcs.n	8001c5c <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f005 ff8b 	bl	8007b70 <HAL_PCD_DataOutStageCallback>
 8001c5a:	e005      	b.n	8001c68 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 ff77 	bl	8004b56 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c68:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8122 	beq.w	8001eba <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c76:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	441a      	add	r2, r3
 8001cb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8001cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc8:	78db      	ldrb	r3, [r3, #3]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	f000 809d 	beq.w	8001e0a <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 8001cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cd6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d046      	beq.n	8001d70 <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce4:	785b      	ldrb	r3, [r3, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d126      	bne.n	8001d38 <PCD_EP_ISR_Handler+0x5dc>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	4413      	add	r3, r2
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
 8001d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	011a      	lsls	r2, r3, #4
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d10:	623b      	str	r3, [r7, #32]
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	801a      	strh	r2, [r3, #0]
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	801a      	strh	r2, [r3, #0]
 8001d36:	e061      	b.n	8001dfc <PCD_EP_ISR_Handler+0x6a0>
 8001d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d3a:	785b      	ldrb	r3, [r3, #1]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d15d      	bne.n	8001dfc <PCD_EP_ISR_Handler+0x6a0>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d54:	4413      	add	r3, r2
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	011a      	lsls	r2, r3, #4
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	4413      	add	r3, r2
 8001d62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	801a      	strh	r2, [r3, #0]
 8001d6e:	e045      	b.n	8001dfc <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d78:	785b      	ldrb	r3, [r3, #1]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d126      	bne.n	8001dcc <PCD_EP_ISR_Handler+0x670>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d92:	4413      	add	r3, r2
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
 8001d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	011a      	lsls	r2, r3, #4
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9e:	4413      	add	r3, r2
 8001da0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	801a      	strh	r2, [r3, #0]
 8001db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc8:	801a      	strh	r2, [r3, #0]
 8001dca:	e017      	b.n	8001dfc <PCD_EP_ISR_Handler+0x6a0>
 8001dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d113      	bne.n	8001dfc <PCD_EP_ISR_Handler+0x6a0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de2:	4413      	add	r3, r2
 8001de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	011a      	lsls	r2, r3, #4
 8001dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dee:	4413      	add	r3, r2
 8001df0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001df4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df8:	2200      	movs	r2, #0
 8001dfa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f005 fecf 	bl	8007ba6 <HAL_PCD_DataInStageCallback>
 8001e08:	e057      	b.n	8001eba <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8001e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e0c:	78db      	ldrb	r3, [r3, #3]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d14c      	bne.n	8001eac <PCD_EP_ISR_Handler+0x750>
 8001e12:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d146      	bne.n	8001eac <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	3302      	adds	r3, #2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 8001e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d907      	bls.n	8001e66 <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 8001e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e5e:	1ad2      	subs	r2, r2, r3
 8001e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e62:	619a      	str	r2, [r3, #24]
 8001e64:	e002      	b.n	8001e6c <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 8001e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d106      	bne.n	8001e82 <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f005 fe93 	bl	8007ba6 <HAL_PCD_DataInStageCallback>
 8001e80:	e01b      	b.n	8001eba <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e8a:	441a      	add	r2, r3
 8001e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e8e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e92:	69da      	ldr	r2, [r3, #28]
 8001e94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e98:	441a      	add	r2, r3
 8001e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f002 fe56 	bl	8004b56 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001eaa:	e006      	b.n	8001eba <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001eac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f91b 	bl	80020f0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f6ff ac4d 	blt.w	8001766 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3758      	adds	r7, #88	; 0x58
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b088      	sub	sp, #32
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d07e      	beq.n	8001fec <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	3302      	adds	r3, #2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f16:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	8b7b      	ldrh	r3, [r7, #26]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d306      	bcc.n	8001f30 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	8b7b      	ldrh	r3, [r7, #26]
 8001f28:	1ad2      	subs	r2, r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	619a      	str	r2, [r3, #24]
 8001f2e:	e002      	b.n	8001f36 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d123      	bne.n	8001f86 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f58:	833b      	strh	r3, [r7, #24]
 8001f5a:	8b3b      	ldrh	r3, [r7, #24]
 8001f5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f60:	833b      	strh	r3, [r7, #24]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	441a      	add	r2, r3
 8001f70:	8b3b      	ldrh	r3, [r7, #24]
 8001f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01f      	beq.n	8001fd0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001faa:	82fb      	strh	r3, [r7, #22]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	441a      	add	r2, r3
 8001fba:	8afb      	ldrh	r3, [r7, #22]
 8001fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fd0:	8b7b      	ldrh	r3, [r7, #26]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8087 	beq.w	80020e6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	6959      	ldr	r1, [r3, #20]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	891a      	ldrh	r2, [r3, #8]
 8001fe4:	8b7b      	ldrh	r3, [r7, #26]
 8001fe6:	f003 fffc 	bl	8005fe2 <USB_ReadPMA>
 8001fea:	e07c      	b.n	80020e6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	3306      	adds	r3, #6
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002014:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	8b7b      	ldrh	r3, [r7, #26]
 800201c:	429a      	cmp	r2, r3
 800201e:	d306      	bcc.n	800202e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	8b7b      	ldrh	r3, [r7, #26]
 8002026:	1ad2      	subs	r2, r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	619a      	str	r2, [r3, #24]
 800202c:	e002      	b.n	8002034 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d123      	bne.n	8002084 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002056:	83fb      	strh	r3, [r7, #30]
 8002058:	8bfb      	ldrh	r3, [r7, #30]
 800205a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800205e:	83fb      	strh	r3, [r7, #30]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	441a      	add	r2, r3
 800206e:	8bfb      	ldrh	r3, [r7, #30]
 8002070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800207c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002080:	b29b      	uxth	r3, r3
 8002082:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d11f      	bne.n	80020ce <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a8:	83bb      	strh	r3, [r7, #28]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	441a      	add	r2, r3
 80020b8:	8bbb      	ldrh	r3, [r7, #28]
 80020ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020ce:	8b7b      	ldrh	r3, [r7, #26]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	6959      	ldr	r1, [r3, #20]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	895a      	ldrh	r2, [r3, #10]
 80020e0:	8b7b      	ldrh	r3, [r7, #26]
 80020e2:	f003 ff7e 	bl	8005fe2 <USB_ReadPMA>
    }
  }

  return count;
 80020e6:	8b7b      	ldrh	r3, [r7, #26]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b0a2      	sub	sp, #136	; 0x88
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 81c7 	beq.w	8002498 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002112:	b29b      	uxth	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	3302      	adds	r3, #2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002132:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800213e:	429a      	cmp	r2, r3
 8002140:	d907      	bls.n	8002152 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800214a:	1ad2      	subs	r2, r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	619a      	str	r2, [r3, #24]
 8002150:	e002      	b.n	8002158 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 80b9 	bne.w	80022d4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d126      	bne.n	80021b8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002178:	b29b      	uxth	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	4413      	add	r3, r2
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	011a      	lsls	r2, r3, #4
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	4413      	add	r3, r2
 800218c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800219c:	b29a      	uxth	r2, r3
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	801a      	strh	r2, [r3, #0]
 80021b6:	e01a      	b.n	80021ee <HAL_PCD_EP_DB_Transmit+0xfe>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	785b      	ldrb	r3, [r3, #1]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d116      	bne.n	80021ee <HAL_PCD_EP_DB_Transmit+0xfe>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	4413      	add	r3, r2
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	011a      	lsls	r2, r3, #4
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	4413      	add	r3, r2
 80021e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ea:	2200      	movs	r2, #0
 80021ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	623b      	str	r3, [r7, #32]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	785b      	ldrb	r3, [r3, #1]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d126      	bne.n	800224a <HAL_PCD_EP_DB_Transmit+0x15a>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4413      	add	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	011a      	lsls	r2, r3, #4
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4413      	add	r3, r2
 800221e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800222e:	b29a      	uxth	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800223e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002242:	b29a      	uxth	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	801a      	strh	r2, [r3, #0]
 8002248:	e017      	b.n	800227a <HAL_PCD_EP_DB_Transmit+0x18a>
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	785b      	ldrb	r3, [r3, #1]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d113      	bne.n	800227a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	4413      	add	r3, r2
 8002262:	623b      	str	r3, [r7, #32]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	011a      	lsls	r2, r3, #4
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	4413      	add	r3, r2
 800226e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2200      	movs	r2, #0
 8002278:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4619      	mov	r1, r3
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f005 fc90 	bl	8007ba6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 82d4 	beq.w	800283a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ac:	827b      	strh	r3, [r7, #18]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	441a      	add	r2, r3
 80022bc:	8a7b      	ldrh	r3, [r7, #18]
 80022be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	8013      	strh	r3, [r2, #0]
 80022d2:	e2b2      	b.n	800283a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d021      	beq.n	8002322 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	441a      	add	r2, r3
 800230a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800230e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002316:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800231a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231e:	b29b      	uxth	r3, r3
 8002320:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002328:	2b01      	cmp	r3, #1
 800232a:	f040 8286 	bne.w	800283a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002336:	441a      	add	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002344:	441a      	add	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	6a1a      	ldr	r2, [r3, #32]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	429a      	cmp	r2, r3
 8002354:	d309      	bcc.n	800236a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002362:	1ad2      	subs	r2, r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	621a      	str	r2, [r3, #32]
 8002368:	e015      	b.n	8002396 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d107      	bne.n	8002382 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002372:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002376:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002380:	e009      	b.n	8002396 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2200      	movs	r2, #0
 8002394:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d155      	bne.n	800244a <HAL_PCD_EP_DB_Transmit+0x35a>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b2:	4413      	add	r3, r2
 80023b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	011a      	lsls	r2, r3, #4
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	4413      	add	r3, r2
 80023c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023c4:	637b      	str	r3, [r7, #52]	; 0x34
 80023c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d112      	bne.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x302>
 80023cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023da:	801a      	strh	r2, [r3, #0]
 80023dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ee:	801a      	strh	r2, [r3, #0]
 80023f0:	e047      	b.n	8002482 <HAL_PCD_EP_DB_Transmit+0x392>
 80023f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f4:	2b3e      	cmp	r3, #62	; 0x3e
 80023f6:	d811      	bhi.n	800241c <HAL_PCD_EP_DB_Transmit+0x32c>
 80023f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023fa:	085b      	lsrs	r3, r3, #1
 80023fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80023fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_PCD_EP_DB_Transmit+0x31e>
 8002408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800240a:	3301      	adds	r3, #1
 800240c:	64bb      	str	r3, [r7, #72]	; 0x48
 800240e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002410:	b29b      	uxth	r3, r3
 8002412:	029b      	lsls	r3, r3, #10
 8002414:	b29a      	uxth	r2, r3
 8002416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002418:	801a      	strh	r2, [r3, #0]
 800241a:	e032      	b.n	8002482 <HAL_PCD_EP_DB_Transmit+0x392>
 800241c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	64bb      	str	r3, [r7, #72]	; 0x48
 8002422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <HAL_PCD_EP_DB_Transmit+0x342>
 800242c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242e:	3b01      	subs	r3, #1
 8002430:	64bb      	str	r3, [r7, #72]	; 0x48
 8002432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002434:	b29b      	uxth	r3, r3
 8002436:	029b      	lsls	r3, r3, #10
 8002438:	b29b      	uxth	r3, r3
 800243a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800243e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002442:	b29a      	uxth	r2, r3
 8002444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002446:	801a      	strh	r2, [r3, #0]
 8002448:	e01b      	b.n	8002482 <HAL_PCD_EP_DB_Transmit+0x392>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	785b      	ldrb	r3, [r3, #1]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d117      	bne.n	8002482 <HAL_PCD_EP_DB_Transmit+0x392>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	643b      	str	r3, [r7, #64]	; 0x40
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002460:	b29b      	uxth	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002466:	4413      	add	r3, r2
 8002468:	643b      	str	r3, [r7, #64]	; 0x40
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	011a      	lsls	r2, r3, #4
 8002470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002472:	4413      	add	r3, r2
 8002474:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800247c:	b29a      	uxth	r2, r3
 800247e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002480:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	6959      	ldr	r1, [r3, #20]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	891a      	ldrh	r2, [r3, #8]
 800248e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002490:	b29b      	uxth	r3, r3
 8002492:	f003 fd60 	bl	8005f56 <USB_WritePMA>
 8002496:	e1d0      	b.n	800283a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	3306      	adds	r3, #6
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d307      	bcc.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	699a      	ldr	r2, [r3, #24]
 80024d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024d8:	1ad2      	subs	r2, r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	619a      	str	r2, [r3, #24]
 80024de:	e002      	b.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2200      	movs	r2, #0
 80024e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 80c4 	bne.w	8002678 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d126      	bne.n	8002546 <HAL_PCD_EP_DB_Transmit+0x456>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250c:	4413      	add	r3, r2
 800250e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	011a      	lsls	r2, r3, #4
 8002516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002518:	4413      	add	r3, r2
 800251a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800251e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800252a:	b29a      	uxth	r2, r3
 800252c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800252e:	801a      	strh	r2, [r3, #0]
 8002530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800253e:	b29a      	uxth	r2, r3
 8002540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e01a      	b.n	800257c <HAL_PCD_EP_DB_Transmit+0x48c>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	785b      	ldrb	r3, [r3, #1]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d116      	bne.n	800257c <HAL_PCD_EP_DB_Transmit+0x48c>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	677b      	str	r3, [r7, #116]	; 0x74
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255c:	b29b      	uxth	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002562:	4413      	add	r3, r2
 8002564:	677b      	str	r3, [r7, #116]	; 0x74
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	011a      	lsls	r2, r3, #4
 800256c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256e:	4413      	add	r3, r2
 8002570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002574:	673b      	str	r3, [r7, #112]	; 0x70
 8002576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002578:	2200      	movs	r2, #0
 800257a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	67bb      	str	r3, [r7, #120]	; 0x78
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	785b      	ldrb	r3, [r3, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d12f      	bne.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4fa>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a2:	4413      	add	r3, r2
 80025a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	011a      	lsls	r2, r3, #4
 80025ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b2:	4413      	add	r3, r2
 80025b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ce:	801a      	strh	r2, [r3, #0]
 80025d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	e017      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x52a>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d113      	bne.n	800261a <HAL_PCD_EP_DB_Transmit+0x52a>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002600:	4413      	add	r3, r2
 8002602:	67bb      	str	r3, [r7, #120]	; 0x78
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	011a      	lsls	r2, r3, #4
 800260a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800260c:	4413      	add	r3, r2
 800260e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002612:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002614:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002616:	2200      	movs	r2, #0
 8002618:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f005 fac0 	bl	8007ba6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	2b00      	cmp	r3, #0
 800262e:	f040 8104 	bne.w	800283a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	441a      	add	r2, r3
 800265e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800266a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800266e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002672:	b29b      	uxth	r3, r3
 8002674:	8013      	strh	r3, [r2, #0]
 8002676:	e0e0      	b.n	800283a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d121      	bne.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	441a      	add	r2, r3
 80026ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	f040 80b4 	bne.w	800283a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026da:	441a      	add	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	69da      	ldr	r2, [r3, #28]
 80026e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e8:	441a      	add	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d309      	bcc.n	800270e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002706:	1ad2      	subs	r2, r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	621a      	str	r2, [r3, #32]
 800270c:	e015      	b.n	800273a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002716:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800271a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002724:	e009      	b.n	800273a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2200      	movs	r2, #0
 8002730:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	667b      	str	r3, [r7, #100]	; 0x64
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	785b      	ldrb	r3, [r3, #1]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d155      	bne.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x704>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002756:	b29b      	uxth	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800275c:	4413      	add	r3, r2
 800275e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	011a      	lsls	r2, r3, #4
 8002766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002768:	4413      	add	r3, r2
 800276a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800276e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002772:	2b00      	cmp	r3, #0
 8002774:	d112      	bne.n	800279c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002780:	b29a      	uxth	r2, r3
 8002782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002794:	b29a      	uxth	r2, r3
 8002796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	e044      	b.n	8002826 <HAL_PCD_EP_DB_Transmit+0x736>
 800279c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279e:	2b3e      	cmp	r3, #62	; 0x3e
 80027a0:	d811      	bhi.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80027a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	657b      	str	r3, [r7, #84]	; 0x54
 80027a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	3301      	adds	r3, #1
 80027b6:	657b      	str	r3, [r7, #84]	; 0x54
 80027b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	029b      	lsls	r3, r3, #10
 80027be:	b29a      	uxth	r2, r3
 80027c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c2:	801a      	strh	r2, [r3, #0]
 80027c4:	e02f      	b.n	8002826 <HAL_PCD_EP_DB_Transmit+0x736>
 80027c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	657b      	str	r3, [r7, #84]	; 0x54
 80027cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <HAL_PCD_EP_DB_Transmit+0x6ec>
 80027d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d8:	3b01      	subs	r3, #1
 80027da:	657b      	str	r3, [r7, #84]	; 0x54
 80027dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027de:	b29b      	uxth	r3, r3
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	e018      	b.n	8002826 <HAL_PCD_EP_DB_Transmit+0x736>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	785b      	ldrb	r3, [r3, #1]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d114      	bne.n	8002826 <HAL_PCD_EP_DB_Transmit+0x736>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800280a:	4413      	add	r3, r2
 800280c:	667b      	str	r3, [r7, #100]	; 0x64
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	011a      	lsls	r2, r3, #4
 8002814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002816:	4413      	add	r3, r2
 8002818:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800281c:	663b      	str	r3, [r7, #96]	; 0x60
 800281e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002820:	b29a      	uxth	r2, r3
 8002822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002824:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	6959      	ldr	r1, [r3, #20]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	895a      	ldrh	r2, [r3, #10]
 8002832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002834:	b29b      	uxth	r3, r3
 8002836:	f003 fb8e 	bl	8005f56 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002854:	823b      	strh	r3, [r7, #16]
 8002856:	8a3b      	ldrh	r3, [r7, #16]
 8002858:	f083 0310 	eor.w	r3, r3, #16
 800285c:	823b      	strh	r3, [r7, #16]
 800285e:	8a3b      	ldrh	r3, [r7, #16]
 8002860:	f083 0320 	eor.w	r3, r3, #32
 8002864:	823b      	strh	r3, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	441a      	add	r2, r3
 8002874:	8a3b      	ldrh	r3, [r7, #16]
 8002876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800287a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800287e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002886:	b29b      	uxth	r3, r3
 8002888:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3788      	adds	r7, #136	; 0x88
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	817b      	strh	r3, [r7, #10]
 80028a2:	4613      	mov	r3, r2
 80028a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028a6:	897b      	ldrh	r3, [r7, #10]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b2:	897b      	ldrh	r3, [r7, #10]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4413      	add	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e009      	b.n	80028de <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028ca:	897a      	ldrh	r2, [r7, #10]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028de:	893b      	ldrh	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2200      	movs	r2, #0
 80028e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	80da      	strh	r2, [r3, #6]
 80028f2:	e00b      	b.n	800290c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2201      	movs	r2, #1
 80028f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	b29a      	uxth	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002922:	af00      	add	r7, sp, #0
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f000 bef4 	b.w	800371e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 816a 	beq.w	8002c1a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002946:	4bb3      	ldr	r3, [pc, #716]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d00c      	beq.n	800296c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002952:	4bb0      	ldr	r3, [pc, #704]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b08      	cmp	r3, #8
 800295c:	d159      	bne.n	8002a12 <HAL_RCC_OscConfig+0xf6>
 800295e:	4bad      	ldr	r3, [pc, #692]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296a:	d152      	bne.n	8002a12 <HAL_RCC_OscConfig+0xf6>
 800296c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002970:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002980:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d102      	bne.n	800299e <HAL_RCC_OscConfig+0x82>
 8002998:	4b9e      	ldr	r3, [pc, #632]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0xae>
 800299e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029ba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029c6:	4b93      	ldr	r3, [pc, #588]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ce:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029d6:	fa92 f2a2 	rbit	r2, r2
 80029da:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80029de:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80029e2:	fab2 f282 	clz	r2, r2
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f042 0220 	orr.w	r2, r2, #32
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f002 021f 	and.w	r2, r2, #31
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 810c 	beq.w	8002c18 <HAL_RCC_OscConfig+0x2fc>
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f040 8106 	bne.w	8002c18 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f000 be86 	b.w	800371e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCC_OscConfig+0x110>
 8002a1e:	4b7d      	ldr	r3, [pc, #500]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a7c      	ldr	r2, [pc, #496]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e030      	b.n	8002a8e <HAL_RCC_OscConfig+0x172>
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x134>
 8002a36:	4b77      	ldr	r3, [pc, #476]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a76      	ldr	r2, [pc, #472]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b74      	ldr	r3, [pc, #464]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a73      	ldr	r2, [pc, #460]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e01e      	b.n	8002a8e <HAL_RCC_OscConfig+0x172>
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a5a:	d10c      	bne.n	8002a76 <HAL_RCC_OscConfig+0x15a>
 8002a5c:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a6c      	ldr	r2, [pc, #432]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a69      	ldr	r2, [pc, #420]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	e00b      	b.n	8002a8e <HAL_RCC_OscConfig+0x172>
 8002a76:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a66      	ldr	r2, [pc, #408]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b64      	ldr	r3, [pc, #400]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a63      	ldr	r2, [pc, #396]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a8e:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	f023 020f 	bic.w	r2, r3, #15
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	495d      	ldr	r1, [pc, #372]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d059      	beq.n	8002b60 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fd fe74 	bl	8000798 <HAL_GetTick>
 8002ab0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab6:	f7fd fe6f 	bl	8000798 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d902      	bls.n	8002acc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	f000 be29 	b.w	800371e <HAL_RCC_OscConfig+0xe02>
 8002acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ad0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ae0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d102      	bne.n	8002afe <HAL_RCC_OscConfig+0x1e2>
 8002af8:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	e015      	b.n	8002b2a <HAL_RCC_OscConfig+0x20e>
 8002afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b02:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b16:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b1a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b26:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b2e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b32:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b36:	fa92 f2a2 	rbit	r2, r2
 8002b3a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b3e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b42:	fab2 f282 	clz	r2, r2
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f042 0220 	orr.w	r2, r2, #32
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	f002 021f 	and.w	r2, r2, #31
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ab      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x19a>
 8002b5e:	e05c      	b.n	8002c1a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fd fe1a 	bl	8000798 <HAL_GetTick>
 8002b64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b6a:	f7fd fe15 	bl	8000798 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d902      	bls.n	8002b80 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	f000 bdcf 	b.w	800371e <HAL_RCC_OscConfig+0xe02>
 8002b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b84:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b94:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d102      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x296>
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x2c2>
 8002bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002bce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002be2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002be6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002bea:	fa92 f2a2 	rbit	r2, r2
 8002bee:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002bf2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f042 0220 	orr.w	r2, r2, #32
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f002 021f 	and.w	r2, r2, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1ab      	bne.n	8002b6a <HAL_RCC_OscConfig+0x24e>
 8002c12:	e002      	b.n	8002c1a <HAL_RCC_OscConfig+0x2fe>
 8002c14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 816f 	beq.w	8002f08 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c2a:	4bd0      	ldr	r3, [pc, #832]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c36:	4bcd      	ldr	r3, [pc, #820]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d16c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x400>
 8002c42:	4bca      	ldr	r3, [pc, #808]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d166      	bne.n	8002d1c <HAL_RCC_OscConfig+0x400>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c60:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_OscConfig+0x362>
 8002c78:	4bbc      	ldr	r3, [pc, #752]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	e013      	b.n	8002ca6 <HAL_RCC_OscConfig+0x38a>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ca2:	4bb2      	ldr	r3, [pc, #712]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002cac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002cb0:	fa92 f2a2 	rbit	r2, r2
 8002cb4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cb8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002cbc:	fab2 f282 	clz	r2, r2
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	f042 0220 	orr.w	r2, r2, #32
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	f002 021f 	and.w	r2, r2, #31
 8002ccc:	2101      	movs	r1, #1
 8002cce:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x3cc>
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f000 bd1b 	b.w	800371e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce8:	4ba0      	ldr	r3, [pc, #640]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf0:	1d3b      	adds	r3, r7, #4
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	21f8      	movs	r1, #248	; 0xf8
 8002cf8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d00:	fa91 f1a1 	rbit	r1, r1
 8002d04:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d08:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d0c:	fab1 f181 	clz	r1, r1
 8002d10:	b2c9      	uxtb	r1, r1
 8002d12:	408b      	lsls	r3, r1
 8002d14:	4995      	ldr	r1, [pc, #596]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	e0f5      	b.n	8002f08 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 8085 	beq.w	8002e32 <HAL_RCC_OscConfig+0x516>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2301      	movs	r3, #1
 8002d52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fd fd20 	bl	8000798 <HAL_GetTick>
 8002d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fd fd1b 	bl	8000798 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d902      	bls.n	8002d74 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	f000 bcd5 	b.w	800371e <HAL_RCC_OscConfig+0xe02>
 8002d74:	2302      	movs	r3, #2
 8002d76:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d86:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_OscConfig+0x488>
 8002d9e:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	e013      	b.n	8002dcc <HAL_RCC_OscConfig+0x4b0>
 8002da4:	2302      	movs	r3, #2
 8002da6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002db6:	2302      	movs	r3, #2
 8002db8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002dbc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002dc8:	4b68      	ldr	r3, [pc, #416]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2202      	movs	r2, #2
 8002dce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002dd2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002dd6:	fa92 f2a2 	rbit	r2, r2
 8002dda:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002dde:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002de2:	fab2 f282 	clz	r2, r2
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	f042 0220 	orr.w	r2, r2, #32
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	f002 021f 	and.w	r2, r2, #31
 8002df2:	2101      	movs	r1, #1
 8002df4:	fa01 f202 	lsl.w	r2, r1, r2
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0af      	beq.n	8002d5e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	21f8      	movs	r1, #248	; 0xf8
 8002e0e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e16:	fa91 f1a1 	rbit	r1, r1
 8002e1a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e1e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e22:	fab1 f181 	clz	r1, r1
 8002e26:	b2c9      	uxtb	r1, r1
 8002e28:	408b      	lsls	r3, r1
 8002e2a:	4950      	ldr	r1, [pc, #320]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	e06a      	b.n	8002f08 <HAL_RCC_OscConfig+0x5ec>
 8002e32:	2301      	movs	r3, #1
 8002e34:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fd fc9b 	bl	8000798 <HAL_GetTick>
 8002e62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fd fc96 	bl	8000798 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d902      	bls.n	8002e7e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	f000 bc50 	b.w	800371e <HAL_RCC_OscConfig+0xe02>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d102      	bne.n	8002eae <HAL_RCC_OscConfig+0x592>
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	e013      	b.n	8002ed6 <HAL_RCC_OscConfig+0x5ba>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ec6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ed2:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002edc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ee0:	fa92 f2a2 	rbit	r2, r2
 8002ee4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002ee8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002eec:	fab2 f282 	clz	r2, r2
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	f042 0220 	orr.w	r2, r2, #32
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	f002 021f 	and.w	r2, r2, #31
 8002efc:	2101      	movs	r1, #1
 8002efe:	fa01 f202 	lsl.w	r2, r1, r2
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1af      	bne.n	8002e68 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80da 	beq.w	80030cc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d069      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x6da>
 8002f22:	2301      	movs	r3, #1
 8002f24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x654>)
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	461a      	mov	r2, r3
 8002f48:	2301      	movs	r3, #1
 8002f4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4c:	f7fd fc24 	bl	8000798 <HAL_GetTick>
 8002f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f54:	e00e      	b.n	8002f74 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f56:	f7fd fc1f 	bl	8000798 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d906      	bls.n	8002f74 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e3d9      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	10908120 	.word	0x10908120
 8002f74:	2302      	movs	r3, #2
 8002f76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f86:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	fa93 f2a3 	rbit	r2, r3
 8002fb0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002fb4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb6:	4ba5      	ldr	r3, [pc, #660]	; (800324c <HAL_RCC_OscConfig+0x930>)
 8002fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	6019      	str	r1, [r3, #0]
 8002fc2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fa93 f1a3 	rbit	r1, r3
 8002fcc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fd0:	6019      	str	r1, [r3, #0]
  return result;
 8002fd2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2101      	movs	r1, #1
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0b0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x63a>
 8002ff4:	e06a      	b.n	80030cc <HAL_RCC_OscConfig+0x7b0>
 8002ff6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	fa93 f2a3 	rbit	r2, r3
 8003008:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800300c:	601a      	str	r2, [r3, #0]
  return result;
 800300e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003012:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	4b8c      	ldr	r3, [pc, #560]	; (8003250 <HAL_RCC_OscConfig+0x934>)
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	461a      	mov	r2, r3
 8003024:	2300      	movs	r3, #0
 8003026:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003028:	f7fd fbb6 	bl	8000798 <HAL_GetTick>
 800302c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003030:	e009      	b.n	8003046 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003032:	f7fd fbb1 	bl	8000798 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e36b      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 8003046:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800304a:	2202      	movs	r2, #2
 800304c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fa93 f2a3 	rbit	r2, r3
 8003058:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003062:	2202      	movs	r2, #2
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800307a:	2202      	movs	r2, #2
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fa93 f2a3 	rbit	r2, r3
 8003088:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800308c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308e:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x930>)
 8003090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003092:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003096:	2102      	movs	r1, #2
 8003098:	6019      	str	r1, [r3, #0]
 800309a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	fa93 f1a3 	rbit	r1, r3
 80030a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030a8:	6019      	str	r1, [r3, #0]
  return result;
 80030aa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1b2      	bne.n	8003032 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8158 	beq.w	800338c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030dc:	2300      	movs	r3, #0
 80030de:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e2:	4b5a      	ldr	r3, [pc, #360]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d112      	bne.n	8003114 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b57      	ldr	r3, [pc, #348]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	4a56      	ldr	r2, [pc, #344]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	61d3      	str	r3, [r2, #28]
 80030fa:	4b54      	ldr	r3, [pc, #336]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	f107 0308 	add.w	r3, r7, #8
 800310c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	4b4f      	ldr	r3, [pc, #316]	; (8003254 <HAL_RCC_OscConfig+0x938>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d11a      	bne.n	8003156 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003120:	4b4c      	ldr	r3, [pc, #304]	; (8003254 <HAL_RCC_OscConfig+0x938>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a4b      	ldr	r2, [pc, #300]	; (8003254 <HAL_RCC_OscConfig+0x938>)
 8003126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312c:	f7fd fb34 	bl	8000798 <HAL_GetTick>
 8003130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e009      	b.n	800314a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fd fb2f 	bl	8000798 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e2e9      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b42      	ldr	r3, [pc, #264]	; (8003254 <HAL_RCC_OscConfig+0x938>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0ef      	beq.n	8003136 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x852>
 8003160:	4b3a      	ldr	r3, [pc, #232]	; (800324c <HAL_RCC_OscConfig+0x930>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4a39      	ldr	r2, [pc, #228]	; (800324c <HAL_RCC_OscConfig+0x930>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6213      	str	r3, [r2, #32]
 800316c:	e02f      	b.n	80031ce <HAL_RCC_OscConfig+0x8b2>
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10c      	bne.n	8003192 <HAL_RCC_OscConfig+0x876>
 8003178:	4b34      	ldr	r3, [pc, #208]	; (800324c <HAL_RCC_OscConfig+0x930>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4a33      	ldr	r2, [pc, #204]	; (800324c <HAL_RCC_OscConfig+0x930>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	6213      	str	r3, [r2, #32]
 8003184:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_RCC_OscConfig+0x930>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4a30      	ldr	r2, [pc, #192]	; (800324c <HAL_RCC_OscConfig+0x930>)
 800318a:	f023 0304 	bic.w	r3, r3, #4
 800318e:	6213      	str	r3, [r2, #32]
 8003190:	e01d      	b.n	80031ce <HAL_RCC_OscConfig+0x8b2>
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d10c      	bne.n	80031b6 <HAL_RCC_OscConfig+0x89a>
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_OscConfig+0x930>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4a2a      	ldr	r2, [pc, #168]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	6213      	str	r3, [r2, #32]
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a27      	ldr	r2, [pc, #156]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	e00b      	b.n	80031ce <HAL_RCC_OscConfig+0x8b2>
 80031b6:	4b25      	ldr	r3, [pc, #148]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4a24      	ldr	r2, [pc, #144]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6213      	str	r3, [r2, #32]
 80031c2:	4b22      	ldr	r3, [pc, #136]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a21      	ldr	r2, [pc, #132]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d06b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d8:	f7fd fade 	bl	8000798 <HAL_GetTick>
 80031dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	e00b      	b.n	80031fa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fd fad9 	bl	8000798 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e291      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 80031fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80031fe:	2202      	movs	r2, #2
 8003200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003216:	2202      	movs	r2, #2
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	fa93 f2a3 	rbit	r2, r3
 8003224:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003228:	601a      	str	r2, [r3, #0]
  return result;
 800322a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800322e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f043 0302 	orr.w	r3, r3, #2
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d109      	bne.n	8003258 <HAL_RCC_OscConfig+0x93c>
 8003244:	4b01      	ldr	r3, [pc, #4]	; (800324c <HAL_RCC_OscConfig+0x930>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	e014      	b.n	8003274 <HAL_RCC_OscConfig+0x958>
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	10908120 	.word	0x10908120
 8003254:	40007000 	.word	0x40007000
 8003258:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800325c:	2202      	movs	r2, #2
 800325e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	4bbb      	ldr	r3, [pc, #748]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003278:	2102      	movs	r1, #2
 800327a:	6011      	str	r1, [r2, #0]
 800327c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	fa92 f1a2 	rbit	r1, r2
 8003286:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800328a:	6011      	str	r1, [r2, #0]
  return result;
 800328c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	fab2 f282 	clz	r2, r2
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f002 021f 	and.w	r2, r2, #31
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d099      	beq.n	80031e2 <HAL_RCC_OscConfig+0x8c6>
 80032ae:	e063      	b.n	8003378 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b0:	f7fd fa72 	bl	8000798 <HAL_GetTick>
 80032b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b8:	e00b      	b.n	80032d2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fd fa6d 	bl	8000798 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e225      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 80032d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032d6:	2202      	movs	r2, #2
 80032d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	fa93 f2a3 	rbit	r2, r3
 80032e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032ee:	2202      	movs	r2, #2
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	fa93 f2a3 	rbit	r2, r3
 80032fc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003300:	601a      	str	r2, [r3, #0]
  return result;
 8003302:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003306:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d102      	bne.n	8003322 <HAL_RCC_OscConfig+0xa06>
 800331c:	4b90      	ldr	r3, [pc, #576]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	e00d      	b.n	800333e <HAL_RCC_OscConfig+0xa22>
 8003322:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003326:	2202      	movs	r2, #2
 8003328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f2a3 	rbit	r2, r3
 8003334:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	4b89      	ldr	r3, [pc, #548]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003342:	2102      	movs	r1, #2
 8003344:	6011      	str	r1, [r2, #0]
 8003346:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	fa92 f1a2 	rbit	r1, r2
 8003350:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003354:	6011      	str	r1, [r2, #0]
  return result;
 8003356:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	fab2 f282 	clz	r2, r2
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f002 021f 	and.w	r2, r2, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1a0      	bne.n	80032ba <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003378:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800337c:	2b01      	cmp	r3, #1
 800337e:	d105      	bne.n	800338c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003380:	4b77      	ldr	r3, [pc, #476]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	4a76      	ldr	r2, [pc, #472]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 8003386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 81c2 	beq.w	800371c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003398:	4b71      	ldr	r3, [pc, #452]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	f000 819c 	beq.w	80036de <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	f040 8114 	bne.w	80035da <HAL_RCC_OscConfig+0xcbe>
 80033b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	fa93 f2a3 	rbit	r2, r3
 80033c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033ca:	601a      	str	r2, [r3, #0]
  return result;
 80033cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	461a      	mov	r2, r3
 80033e4:	2300      	movs	r3, #0
 80033e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fd f9d6 	bl	8000798 <HAL_GetTick>
 80033ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f0:	e009      	b.n	8003406 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f2:	f7fd f9d1 	bl	8000798 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e18b      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 8003406:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800340a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800340e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	fa93 f2a3 	rbit	r2, r3
 800341a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800341e:	601a      	str	r2, [r3, #0]
  return result;
 8003420:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003424:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d102      	bne.n	8003440 <HAL_RCC_OscConfig+0xb24>
 800343a:	4b49      	ldr	r3, [pc, #292]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	e01b      	b.n	8003478 <HAL_RCC_OscConfig+0xb5c>
 8003440:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003444:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	fa93 f2a3 	rbit	r2, r3
 8003454:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800345e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	fa93 f2a3 	rbit	r2, r3
 800346e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	4b3a      	ldr	r3, [pc, #232]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800347c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003480:	6011      	str	r1, [r2, #0]
 8003482:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	fa92 f1a2 	rbit	r1, r2
 800348c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003490:	6011      	str	r1, [r2, #0]
  return result;
 8003492:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	fab2 f282 	clz	r2, r2
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f042 0220 	orr.w	r2, r2, #32
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	f002 021f 	and.w	r2, r2, #31
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f202 	lsl.w	r2, r1, r2
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d19e      	bne.n	80033f2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b4:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034bc:	1d3b      	adds	r3, r7, #4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	4925      	ldr	r1, [pc, #148]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
 80034d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	fa93 f2a3 	rbit	r2, r3
 80034e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034e8:	601a      	str	r2, [r3, #0]
  return result;
 80034ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034ee:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	461a      	mov	r2, r3
 8003502:	2301      	movs	r3, #1
 8003504:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003506:	f7fd f947 	bl	8000798 <HAL_GetTick>
 800350a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800350e:	e009      	b.n	8003524 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003510:	f7fd f942 	bl	8000798 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0fc      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 8003524:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800352c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	fa93 f2a3 	rbit	r2, r3
 8003538:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800353c:	601a      	str	r2, [r3, #0]
  return result;
 800353e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003542:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <HAL_RCC_OscConfig+0xc48>
 8003558:	4b01      	ldr	r3, [pc, #4]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	e01e      	b.n	800359c <HAL_RCC_OscConfig+0xc80>
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
 8003564:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	fa93 f2a3 	rbit	r2, r3
 8003578:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003582:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	fa93 f2a3 	rbit	r2, r3
 8003592:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	4b63      	ldr	r3, [pc, #396]	; (8003728 <HAL_RCC_OscConfig+0xe0c>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035a4:	6011      	str	r1, [r2, #0]
 80035a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	fa92 f1a2 	rbit	r1, r2
 80035b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035b4:	6011      	str	r1, [r2, #0]
  return result;
 80035b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	fab2 f282 	clz	r2, r2
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f042 0220 	orr.w	r2, r2, #32
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f002 021f 	and.w	r2, r2, #31
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f202 	lsl.w	r2, r1, r2
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d09b      	beq.n	8003510 <HAL_RCC_OscConfig+0xbf4>
 80035d8:	e0a0      	b.n	800371c <HAL_RCC_OscConfig+0xe00>
 80035da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	fa93 f2a3 	rbit	r2, r3
 80035ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f2:	601a      	str	r2, [r3, #0]
  return result;
 80035f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003604:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	461a      	mov	r2, r3
 800360c:	2300      	movs	r3, #0
 800360e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fd f8c2 	bl	8000798 <HAL_GetTick>
 8003614:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e009      	b.n	800362e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361a:	f7fd f8bd 	bl	8000798 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e077      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 800362e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003632:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	fa93 f2a3 	rbit	r2, r3
 8003642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003646:	601a      	str	r2, [r3, #0]
  return result;
 8003648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800364c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d102      	bne.n	8003668 <HAL_RCC_OscConfig+0xd4c>
 8003662:	4b31      	ldr	r3, [pc, #196]	; (8003728 <HAL_RCC_OscConfig+0xe0c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	e01b      	b.n	80036a0 <HAL_RCC_OscConfig+0xd84>
 8003668:	f107 0320 	add.w	r3, r7, #32
 800366c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f107 0320 	add.w	r3, r7, #32
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fa93 f2a3 	rbit	r2, r3
 800367c:	f107 031c 	add.w	r3, r7, #28
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f107 0318 	add.w	r3, r7, #24
 8003686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	f107 0318 	add.w	r3, r7, #24
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	fa93 f2a3 	rbit	r2, r3
 8003696:	f107 0314 	add.w	r3, r7, #20
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	4b22      	ldr	r3, [pc, #136]	; (8003728 <HAL_RCC_OscConfig+0xe0c>)
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f107 0210 	add.w	r2, r7, #16
 80036a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036a8:	6011      	str	r1, [r2, #0]
 80036aa:	f107 0210 	add.w	r2, r7, #16
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	fa92 f1a2 	rbit	r1, r2
 80036b4:	f107 020c 	add.w	r2, r7, #12
 80036b8:	6011      	str	r1, [r2, #0]
  return result;
 80036ba:	f107 020c 	add.w	r2, r7, #12
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	fab2 f282 	clz	r2, r2
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	f042 0220 	orr.w	r2, r2, #32
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	f002 021f 	and.w	r2, r2, #31
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f202 	lsl.w	r2, r1, r2
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d19e      	bne.n	800361a <HAL_RCC_OscConfig+0xcfe>
 80036dc:	e01e      	b.n	800371c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e018      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <HAL_RCC_OscConfig+0xe0c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036fc:	1d3b      	adds	r3, r7, #4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	429a      	cmp	r2, r3
 8003704:	d108      	bne.n	8003718 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003706:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800370a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800370e:	1d3b      	adds	r3, r7, #4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000

0800372c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b09e      	sub	sp, #120	; 0x78
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e162      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b90      	ldr	r3, [pc, #576]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b8d      	ldr	r3, [pc, #564]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 0207 	bic.w	r2, r3, #7
 800375a:	498b      	ldr	r1, [pc, #556]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b89      	ldr	r3, [pc, #548]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e14a      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b82      	ldr	r3, [pc, #520]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	497f      	ldr	r1, [pc, #508]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80dc 	beq.w	8003958 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d13c      	bne.n	8003822 <HAL_RCC_ClockConfig+0xf6>
 80037a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d102      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xa6>
 80037cc:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	e00f      	b.n	80037f2 <HAL_RCC_ClockConfig+0xc6>
 80037d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	667b      	str	r3, [r7, #100]	; 0x64
 80037e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e4:	663b      	str	r3, [r7, #96]	; 0x60
 80037e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ee:	4b67      	ldr	r3, [pc, #412]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80037f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037fa:	fa92 f2a2 	rbit	r2, r2
 80037fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003800:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f002 021f 	and.w	r2, r2, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d17b      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0f3      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d13c      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x178>
 800382a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_RCC_ClockConfig+0x128>
 800384e:	4b4f      	ldr	r3, [pc, #316]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	e00f      	b.n	8003874 <HAL_RCC_ClockConfig+0x148>
 8003854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003858:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
 8003862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003866:	643b      	str	r3, [r7, #64]	; 0x40
 8003868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003870:	4b46      	ldr	r3, [pc, #280]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003878:	63ba      	str	r2, [r7, #56]	; 0x38
 800387a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800387c:	fa92 f2a2 	rbit	r2, r2
 8003880:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003884:	fab2 f282 	clz	r2, r2
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f042 0220 	orr.w	r2, r2, #32
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	f002 021f 	and.w	r2, r2, #31
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f202 	lsl.w	r2, r1, r2
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d13a      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b2      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
 80038a4:	2302      	movs	r3, #2
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d102      	bne.n	80038cc <HAL_RCC_ClockConfig+0x1a0>
 80038c6:	4b31      	ldr	r3, [pc, #196]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	e00d      	b.n	80038e8 <HAL_RCC_ClockConfig+0x1bc>
 80038cc:	2302      	movs	r3, #2
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
 80038d8:	2302      	movs	r3, #2
 80038da:	623b      	str	r3, [r7, #32]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	4b29      	ldr	r3, [pc, #164]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2202      	movs	r2, #2
 80038ea:	61ba      	str	r2, [r7, #24]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	fa92 f2a2 	rbit	r2, r2
 80038f2:	617a      	str	r2, [r7, #20]
  return result;
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	fab2 f282 	clz	r2, r2
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	f042 0220 	orr.w	r2, r2, #32
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	f002 021f 	and.w	r2, r2, #31
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f202 	lsl.w	r2, r1, r2
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e079      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	491a      	ldr	r1, [pc, #104]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fc ff36 	bl	8000798 <HAL_GetTick>
 800392c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fc ff32 	bl	8000798 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e061      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d214      	bcs.n	8003990 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 0207 	bic.w	r2, r3, #7
 800396e:	4906      	ldr	r1, [pc, #24]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b04      	ldr	r3, [pc, #16]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e040      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
 8003988:	40022000 	.word	0x40022000
 800398c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	491a      	ldr	r1, [pc, #104]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4912      	ldr	r1, [pc, #72]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039ce:	f000 f829 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039d2:	4601      	mov	r1, r0
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039dc:	22f0      	movs	r2, #240	; 0xf0
 80039de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	fa92 f2a2 	rbit	r2, r2
 80039e6:	60fa      	str	r2, [r7, #12]
  return result;
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	fab2 f282 	clz	r2, r2
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	40d3      	lsrs	r3, r2
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x2ec>)
 80039f4:	5cd3      	ldrb	r3, [r2, r3]
 80039f6:	fa21 f303 	lsr.w	r3, r1, r3
 80039fa:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <HAL_RCC_ClockConfig+0x2f0>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_RCC_ClockConfig+0x2f4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fc fe84 	bl	8000710 <HAL_InitTick>
  
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3778      	adds	r7, #120	; 0x78
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	08008118 	.word	0x08008118
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	20000004 	.word	0x20000004

08003a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b08b      	sub	sp, #44	; 0x2c
 8003a28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a3e:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x30>
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x36>
 8003a52:	e03c      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a54:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a56:	623b      	str	r3, [r7, #32]
      break;
 8003a58:	e03c      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a60:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a64:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	fa92 f2a2 	rbit	r2, r2
 8003a6c:	607a      	str	r2, [r7, #4]
  return result;
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	fab2 f282 	clz	r2, r2
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	40d3      	lsrs	r3, r2
 8003a78:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a7a:	5cd3      	ldrb	r3, [r2, r3]
 8003a7c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a7e:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	220f      	movs	r2, #15
 8003a88:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	fa92 f2a2 	rbit	r2, r2
 8003a90:	60fa      	str	r2, [r7, #12]
  return result;
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	fab2 f282 	clz	r2, r2
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	40d3      	lsrs	r3, r2
 8003a9c:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a9e:	5cd3      	ldrb	r3, [r2, r3]
 8003aa0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003aac:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	fb02 f303 	mul.w	r3, r2, r3
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
 8003abc:	e004      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	4a0c      	ldr	r2, [pc, #48]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	623b      	str	r3, [r7, #32]
      break;
 8003acc:	e002      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ad0:	623b      	str	r3, [r7, #32]
      break;
 8003ad2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	372c      	adds	r7, #44	; 0x2c
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	007a1200 	.word	0x007a1200
 8003aec:	08008128 	.word	0x08008128
 8003af0:	08008138 	.word	0x08008138
 8003af4:	003d0900 	.word	0x003d0900

08003af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b092      	sub	sp, #72	; 0x48
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80d4 	beq.w	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1c:	4b4e      	ldr	r3, [pc, #312]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10e      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b28:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	4a4a      	ldr	r2, [pc, #296]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b32:	61d3      	str	r3, [r2, #28]
 8003b34:	4b48      	ldr	r3, [pc, #288]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b46:	4b45      	ldr	r3, [pc, #276]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d118      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b52:	4b42      	ldr	r3, [pc, #264]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a41      	ldr	r2, [pc, #260]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5e:	f7fc fe1b 	bl	8000798 <HAL_GetTick>
 8003b62:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b64:	e008      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b66:	f7fc fe17 	bl	8000798 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b64      	cmp	r3, #100	; 0x64
 8003b72:	d901      	bls.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e169      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b84:	4b34      	ldr	r3, [pc, #208]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 8084 	beq.w	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d07c      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba4:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	fa93 f3a3 	rbit	r3, r3
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2301      	movs	r3, #1
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bf6:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d04b      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fc fdc7 	bl	8000798 <HAL_GetTick>
 8003c0a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fc fdc3 	bl	8000798 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e113      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003c24:	2302      	movs	r3, #2
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c30:	2302      	movs	r3, #2
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	61fb      	str	r3, [r7, #28]
  return result;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	fab3 f383 	clz	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d108      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c52:	4b01      	ldr	r3, [pc, #4]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	e00d      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	10908100 	.word	0x10908100
 8003c64:	2302      	movs	r3, #2
 8003c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	4b78      	ldr	r3, [pc, #480]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	2202      	movs	r2, #2
 8003c76:	613a      	str	r2, [r7, #16]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	fa92 f2a2 	rbit	r2, r2
 8003c7e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	fab2 f282 	clz	r2, r2
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	f002 021f 	and.w	r2, r2, #31
 8003c92:	2101      	movs	r1, #1
 8003c94:	fa01 f202 	lsl.w	r2, r1, r2
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0b7      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c9e:	4b6d      	ldr	r3, [pc, #436]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	496a      	ldr	r1, [pc, #424]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cb0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d105      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb8:	4b66      	ldr	r3, [pc, #408]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	4a65      	ldr	r2, [pc, #404]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd0:	4b60      	ldr	r3, [pc, #384]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	f023 0203 	bic.w	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	495d      	ldr	r1, [pc, #372]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cee:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	4956      	ldr	r1, [pc, #344]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d0c:	4b51      	ldr	r3, [pc, #324]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	494e      	ldr	r1, [pc, #312]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d2a:	4b4a      	ldr	r3, [pc, #296]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f023 0210 	bic.w	r2, r3, #16
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	4947      	ldr	r1, [pc, #284]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d48:	4b42      	ldr	r3, [pc, #264]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	493f      	ldr	r1, [pc, #252]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f023 0220 	bic.w	r2, r3, #32
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	4938      	ldr	r1, [pc, #224]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d84:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	4930      	ldr	r1, [pc, #192]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003da2:	4b2c      	ldr	r3, [pc, #176]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	4929      	ldr	r1, [pc, #164]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dc0:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	4921      	ldr	r1, [pc, #132]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	491a      	ldr	r1, [pc, #104]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003dfc:	4b15      	ldr	r3, [pc, #84]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	4912      	ldr	r1, [pc, #72]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e1a:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	490b      	ldr	r1, [pc, #44]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e44:	4903      	ldr	r1, [pc, #12]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3748      	adds	r7, #72	; 0x48
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40021000 	.word	0x40021000

08003e58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e09d      	b.n	8003fa6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d108      	bne.n	8003e84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e7a:	d009      	beq.n	8003e90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	61da      	str	r2, [r3, #28]
 8003e82:	e005      	b.n	8003e90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fc fb68 	bl	8000580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ed0:	d902      	bls.n	8003ed8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e002      	b.n	8003ede <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ee6:	d007      	beq.n	8003ef8 <HAL_SPI_Init+0xa0>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ef0:	d002      	beq.n	8003ef8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3a:	ea42 0103 	orr.w	r1, r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	0c1b      	lsrs	r3, r3, #16
 8003f54:	f003 0204 	and.w	r2, r3, #4
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f74:	ea42 0103 	orr.w	r1, r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b085      	sub	sp, #20
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fbe:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003fc2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fe4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003fe8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004012:	b084      	sub	sp, #16
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	f107 0014 	add.w	r0, r7, #20
 8004020:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	b004      	add	sp, #16
 8004052:	4770      	bx	lr

08004054 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004054:	b480      	push	{r7}
 8004056:	b09d      	sub	sp, #116	; 0x74
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	78db      	ldrb	r3, [r3, #3]
 8004082:	2b03      	cmp	r3, #3
 8004084:	d81f      	bhi.n	80040c6 <USB_ActivateEndpoint+0x72>
 8004086:	a201      	add	r2, pc, #4	; (adr r2, 800408c <USB_ActivateEndpoint+0x38>)
 8004088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408c:	0800409d 	.word	0x0800409d
 8004090:	080040b9 	.word	0x080040b9
 8004094:	080040cf 	.word	0x080040cf
 8004098:	080040ab 	.word	0x080040ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800409c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80040a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80040a8:	e012      	b.n	80040d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80040ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80040b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80040b6:	e00b      	b.n	80040d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80040b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80040bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80040c4:	e004      	b.n	80040d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80040cc:	e000      	b.n	80040d0 <USB_ActivateEndpoint+0x7c>
      break;
 80040ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	441a      	add	r2, r3
 80040da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80040de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	b21b      	sxth	r3, r3
 8004102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	b21a      	sxth	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	b21b      	sxth	r3, r3
 8004112:	4313      	orrs	r3, r2
 8004114:	b21b      	sxth	r3, r3
 8004116:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	441a      	add	r2, r3
 8004124:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800412c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004138:	b29b      	uxth	r3, r3
 800413a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	7b1b      	ldrb	r3, [r3, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	f040 8149 	bne.w	80043d8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8084 	beq.w	8004258 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415a:	b29b      	uxth	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4413      	add	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	011a      	lsls	r2, r3, #4
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	88db      	ldrh	r3, [r3, #6]
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	b29b      	uxth	r3, r3
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	827b      	strh	r3, [r7, #18]
 8004192:	8a7b      	ldrh	r3, [r7, #18]
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <USB_ActivateEndpoint+0x180>
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	823b      	strh	r3, [r7, #16]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	8a3b      	ldrh	r3, [r7, #16]
 80041c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	78db      	ldrb	r3, [r3, #3]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d020      	beq.n	800421e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f2:	81bb      	strh	r3, [r7, #12]
 80041f4:	89bb      	ldrh	r3, [r7, #12]
 80041f6:	f083 0320 	eor.w	r3, r3, #32
 80041fa:	81bb      	strh	r3, [r7, #12]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	441a      	add	r2, r3
 8004206:	89bb      	ldrh	r3, [r7, #12]
 8004208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800420c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004218:	b29b      	uxth	r3, r3
 800421a:	8013      	strh	r3, [r2, #0]
 800421c:	e2a6      	b.n	800476c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004234:	81fb      	strh	r3, [r7, #14]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	89fb      	ldrh	r3, [r7, #14]
 8004242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004252:	b29b      	uxth	r3, r3
 8004254:	8013      	strh	r3, [r2, #0]
 8004256:	e289      	b.n	800476c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	633b      	str	r3, [r7, #48]	; 0x30
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004262:	b29b      	uxth	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	4413      	add	r3, r2
 800426a:	633b      	str	r3, [r7, #48]	; 0x30
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	011a      	lsls	r2, r3, #4
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	4413      	add	r3, r2
 8004276:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	88db      	ldrh	r3, [r3, #6]
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004296:	b29b      	uxth	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	4413      	add	r3, r2
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	011a      	lsls	r2, r3, #4
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	4413      	add	r3, r2
 80042aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d112      	bne.n	80042de <USB_ActivateEndpoint+0x28a>
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	801a      	strh	r2, [r3, #0]
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	801a      	strh	r2, [r3, #0]
 80042dc:	e02f      	b.n	800433e <USB_ActivateEndpoint+0x2ea>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b3e      	cmp	r3, #62	; 0x3e
 80042e4:	d813      	bhi.n	800430e <USB_ActivateEndpoint+0x2ba>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	085b      	lsrs	r3, r3, #1
 80042ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <USB_ActivateEndpoint+0x2ac>
 80042fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042fc:	3301      	adds	r3, #1
 80042fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004302:	b29b      	uxth	r3, r3
 8004304:	029b      	lsls	r3, r3, #10
 8004306:	b29a      	uxth	r2, r3
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	e017      	b.n	800433e <USB_ActivateEndpoint+0x2ea>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	66bb      	str	r3, [r7, #104]	; 0x68
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2b00      	cmp	r3, #0
 8004320:	d102      	bne.n	8004328 <USB_ActivateEndpoint+0x2d4>
 8004322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004324:	3b01      	subs	r3, #1
 8004326:	66bb      	str	r3, [r7, #104]	; 0x68
 8004328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800432a:	b29b      	uxth	r3, r3
 800432c:	029b      	lsls	r3, r3, #10
 800432e:	b29b      	uxth	r3, r3
 8004330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004338:	b29a      	uxth	r2, r3
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	847b      	strh	r3, [r7, #34]	; 0x22
 800434c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800434e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01b      	beq.n	800438e <USB_ActivateEndpoint+0x33a>
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436c:	843b      	strh	r3, [r7, #32]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	441a      	add	r2, r3
 8004378:	8c3b      	ldrh	r3, [r7, #32]
 800437a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800437e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438a:	b29b      	uxth	r3, r3
 800438c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b29b      	uxth	r3, r3
 800439c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a4:	83fb      	strh	r3, [r7, #30]
 80043a6:	8bfb      	ldrh	r3, [r7, #30]
 80043a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80043ac:	83fb      	strh	r3, [r7, #30]
 80043ae:	8bfb      	ldrh	r3, [r7, #30]
 80043b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043b4:	83fb      	strh	r3, [r7, #30]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	441a      	add	r2, r3
 80043c0:	8bfb      	ldrh	r3, [r7, #30]
 80043c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	8013      	strh	r3, [r2, #0]
 80043d6:	e1c9      	b.n	800476c <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	78db      	ldrb	r3, [r3, #3]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d11e      	bne.n	800441e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	441a      	add	r2, r3
 8004404:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004410:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004418:	b29b      	uxth	r3, r3
 800441a:	8013      	strh	r3, [r2, #0]
 800441c:	e01d      	b.n	800445a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004434:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	441a      	add	r2, r3
 8004442:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800444a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800444e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004456:	b29b      	uxth	r3, r3
 8004458:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004464:	b29b      	uxth	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800446a:	4413      	add	r3, r2
 800446c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	011a      	lsls	r2, r3, #4
 8004474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004476:	4413      	add	r3, r2
 8004478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800447c:	65bb      	str	r3, [r7, #88]	; 0x58
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	891b      	ldrh	r3, [r3, #8]
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	b29b      	uxth	r3, r3
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800448c:	801a      	strh	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	657b      	str	r3, [r7, #84]	; 0x54
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004498:	b29b      	uxth	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800449e:	4413      	add	r3, r2
 80044a0:	657b      	str	r3, [r7, #84]	; 0x54
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	011a      	lsls	r2, r3, #4
 80044a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80044b0:	653b      	str	r3, [r7, #80]	; 0x50
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	895b      	ldrh	r3, [r3, #10]
 80044b6:	085b      	lsrs	r3, r3, #1
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	785b      	ldrb	r3, [r3, #1]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f040 8093 	bne.w	80045f2 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80044dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <USB_ActivateEndpoint+0x4cc>
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	441a      	add	r2, r3
 800450a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800450c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451c:	b29b      	uxth	r3, r3
 800451e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800452e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01b      	beq.n	8004570 <USB_ActivateEndpoint+0x51c>
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	441a      	add	r2, r3
 800455a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800455c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004568:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800456c:	b29b      	uxth	r3, r3
 800456e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004586:	873b      	strh	r3, [r7, #56]	; 0x38
 8004588:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800458a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800458e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004590:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004592:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004596:	873b      	strh	r3, [r7, #56]	; 0x38
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	441a      	add	r2, r3
 80045a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ce:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	441a      	add	r2, r3
 80045da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	8013      	strh	r3, [r2, #0]
 80045f0:	e0bc      	b.n	800476c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004602:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d01d      	beq.n	800464a <USB_ActivateEndpoint+0x5f6>
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004624:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	441a      	add	r2, r3
 8004632:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004646:	b29b      	uxth	r3, r3
 8004648:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800465a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01d      	beq.n	80046a2 <USB_ActivateEndpoint+0x64e>
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800468e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	78db      	ldrb	r3, [r3, #3]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d024      	beq.n	80046f4 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80046c8:	f083 0320 	eor.w	r3, r3, #32
 80046cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	441a      	add	r2, r3
 80046da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80046de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	8013      	strh	r3, [r2, #0]
 80046f2:	e01d      	b.n	8004730 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800471c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472c:	b29b      	uxth	r3, r3
 800472e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b29b      	uxth	r3, r3
 800473e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004746:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	441a      	add	r2, r3
 8004754:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800475c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004768:	b29b      	uxth	r3, r3
 800476a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800476c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004770:	4618      	mov	r0, r3
 8004772:	3774      	adds	r7, #116	; 0x74
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800477c:	b480      	push	{r7}
 800477e:	b08d      	sub	sp, #52	; 0x34
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	7b1b      	ldrb	r3, [r3, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f040 808e 	bne.w	80048ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d044      	beq.n	8004822 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	81bb      	strh	r3, [r7, #12]
 80047a6:	89bb      	ldrh	r3, [r7, #12]
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01b      	beq.n	80047e8 <USB_DeactivateEndpoint+0x6c>
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	817b      	strh	r3, [r7, #10]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	897b      	ldrh	r3, [r7, #10]
 80047d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fe:	813b      	strh	r3, [r7, #8]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	441a      	add	r2, r3
 800480a:	893b      	ldrh	r3, [r7, #8]
 800480c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481c:	b29b      	uxth	r3, r3
 800481e:	8013      	strh	r3, [r2, #0]
 8004820:	e192      	b.n	8004b48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	827b      	strh	r3, [r7, #18]
 8004830:	8a7b      	ldrh	r3, [r7, #18]
 8004832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01b      	beq.n	8004872 <USB_DeactivateEndpoint+0xf6>
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004850:	823b      	strh	r3, [r7, #16]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	441a      	add	r2, r3
 800485c:	8a3b      	ldrh	r3, [r7, #16]
 800485e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004866:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800486a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486e:	b29b      	uxth	r3, r3
 8004870:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004888:	81fb      	strh	r3, [r7, #14]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	89fb      	ldrh	r3, [r7, #14]
 8004896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]
 80048aa:	e14d      	b.n	8004b48 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	785b      	ldrb	r3, [r3, #1]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 80a5 	bne.w	8004a00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	843b      	strh	r3, [r7, #32]
 80048c4:	8c3b      	ldrh	r3, [r7, #32]
 80048c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01b      	beq.n	8004906 <USB_DeactivateEndpoint+0x18a>
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e4:	83fb      	strh	r3, [r7, #30]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	8bfb      	ldrh	r3, [r7, #30]
 80048f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004902:	b29b      	uxth	r3, r3
 8004904:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	83bb      	strh	r3, [r7, #28]
 8004914:	8bbb      	ldrh	r3, [r7, #28]
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01b      	beq.n	8004956 <USB_DeactivateEndpoint+0x1da>
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	837b      	strh	r3, [r7, #26]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	8b7b      	ldrh	r3, [r7, #26]
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496c:	833b      	strh	r3, [r7, #24]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	441a      	add	r2, r3
 8004978:	8b3b      	ldrh	r3, [r7, #24]
 800497a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004986:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800498a:	b29b      	uxth	r3, r3
 800498c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a4:	82fb      	strh	r3, [r7, #22]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	441a      	add	r2, r3
 80049b0:	8afb      	ldrh	r3, [r7, #22]
 80049b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049dc:	82bb      	strh	r3, [r7, #20]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	441a      	add	r2, r3
 80049e8:	8abb      	ldrh	r3, [r7, #20]
 80049ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	8013      	strh	r3, [r2, #0]
 80049fe:	e0a3      	b.n	8004b48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01b      	beq.n	8004a50 <USB_DeactivateEndpoint+0x2d4>
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004a5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01b      	beq.n	8004aa0 <USB_DeactivateEndpoint+0x324>
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	441a      	add	r2, r3
 8004ac2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	441a      	add	r2, r3
 8004afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3734      	adds	r7, #52	; 0x34
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b0c2      	sub	sp, #264	; 0x108
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	6018      	str	r0, [r3, #0]
 8004b60:	463b      	mov	r3, r7
 8004b62:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b64:	463b      	mov	r3, r7
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	f040 8509 	bne.w	8005582 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004b70:	463b      	mov	r3, r7
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	463b      	mov	r3, r7
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d905      	bls.n	8004b8c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004b80:	463b      	mov	r3, r7
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b8a:	e004      	b.n	8004b96 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004b8c:	463b      	mov	r3, r7
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004b96:	463b      	mov	r3, r7
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	7b1b      	ldrb	r3, [r3, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d128      	bne.n	8004bf2 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ba0:	463b      	mov	r3, r7
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6959      	ldr	r1, [r3, #20]
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	88da      	ldrh	r2, [r3, #6]
 8004bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	1d38      	adds	r0, r7, #4
 8004bb4:	6800      	ldr	r0, [r0, #0]
 8004bb6:	f001 f9ce 	bl	8005f56 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	1d3b      	adds	r3, r7, #4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	461a      	mov	r2, r3
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4413      	add	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	463b      	mov	r3, r7
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	011a      	lsls	r2, r3, #4
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	801a      	strh	r2, [r3, #0]
 8004bee:	f000 bc9f 	b.w	8005530 <USB_EPStartXfer+0x9da>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	78db      	ldrb	r3, [r3, #3]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	f040 8347 	bne.w	800528c <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004bfe:	463b      	mov	r3, r7
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6a1a      	ldr	r2, [r3, #32]
 8004c04:	463b      	mov	r3, r7
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	f240 82eb 	bls.w	80051e6 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c10:	1d3b      	adds	r3, r7, #4
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	463b      	mov	r3, r7
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	463b      	mov	r3, r7
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	441a      	add	r2, r3
 8004c3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c48:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004c54:	463b      	mov	r3, r7
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6a1a      	ldr	r2, [r3, #32]
 8004c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c5e:	1ad2      	subs	r2, r2, r3
 8004c60:	463b      	mov	r3, r7
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c66:	1d3b      	adds	r3, r7, #4
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	463b      	mov	r3, r7
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8159 	beq.w	8004f34 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c82:	1d3b      	adds	r3, r7, #4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	633b      	str	r3, [r7, #48]	; 0x30
 8004c88:	463b      	mov	r3, r7
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d164      	bne.n	8004d5c <USB_EPStartXfer+0x206>
 8004c92:	1d3b      	adds	r3, r7, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c98:	1d3b      	adds	r3, r7, #4
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	4413      	add	r3, r2
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004caa:	463b      	mov	r3, r7
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	011a      	lsls	r2, r3, #4
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d112      	bne.n	8004cea <USB_EPStartXfer+0x194>
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	801a      	strh	r2, [r3, #0]
 8004ce8:	e054      	b.n	8004d94 <USB_EPStartXfer+0x23e>
 8004cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cee:	2b3e      	cmp	r3, #62	; 0x3e
 8004cf0:	d817      	bhi.n	8004d22 <USB_EPStartXfer+0x1cc>
 8004cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <USB_EPStartXfer+0x1bc>
 8004d08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	029b      	lsls	r3, r3, #10
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	e038      	b.n	8004d94 <USB_EPStartXfer+0x23e>
 8004d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <USB_EPStartXfer+0x1ec>
 8004d38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	029b      	lsls	r3, r3, #10
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	801a      	strh	r2, [r3, #0]
 8004d5a:	e01b      	b.n	8004d94 <USB_EPStartXfer+0x23e>
 8004d5c:	463b      	mov	r3, r7
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d116      	bne.n	8004d94 <USB_EPStartXfer+0x23e>
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	4413      	add	r3, r2
 8004d76:	633b      	str	r3, [r7, #48]	; 0x30
 8004d78:	463b      	mov	r3, r7
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	011a      	lsls	r2, r3, #4
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	4413      	add	r3, r2
 8004d84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d94:	463b      	mov	r3, r7
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	895b      	ldrh	r3, [r3, #10]
 8004d9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d9e:	463b      	mov	r3, r7
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6959      	ldr	r1, [r3, #20]
 8004da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004dae:	1d38      	adds	r0, r7, #4
 8004db0:	6800      	ldr	r0, [r0, #0]
 8004db2:	f001 f8d0 	bl	8005f56 <USB_WritePMA>
            ep->xfer_buff += len;
 8004db6:	463b      	mov	r3, r7
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695a      	ldr	r2, [r3, #20]
 8004dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dc0:	441a      	add	r2, r3
 8004dc2:	463b      	mov	r3, r7
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004dc8:	463b      	mov	r3, r7
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6a1a      	ldr	r2, [r3, #32]
 8004dce:	463b      	mov	r3, r7
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d909      	bls.n	8004dec <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8004dd8:	463b      	mov	r3, r7
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6a1a      	ldr	r2, [r3, #32]
 8004dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	463b      	mov	r3, r7
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	621a      	str	r2, [r3, #32]
 8004dea:	e008      	b.n	8004dfe <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8004dec:	463b      	mov	r3, r7
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004df6:	463b      	mov	r3, r7
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dfe:	463b      	mov	r3, r7
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d164      	bne.n	8004ed2 <USB_EPStartXfer+0x37c>
 8004e08:	1d3b      	adds	r3, r7, #4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	1d3b      	adds	r3, r7, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	463b      	mov	r3, r7
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	011a      	lsls	r2, r3, #4
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d112      	bne.n	8004e60 <USB_EPStartXfer+0x30a>
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	801a      	strh	r2, [r3, #0]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	801a      	strh	r2, [r3, #0]
 8004e5e:	e057      	b.n	8004f10 <USB_EPStartXfer+0x3ba>
 8004e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e64:	2b3e      	cmp	r3, #62	; 0x3e
 8004e66:	d817      	bhi.n	8004e98 <USB_EPStartXfer+0x342>
 8004e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d004      	beq.n	8004e88 <USB_EPStartXfer+0x332>
 8004e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e82:	3301      	adds	r3, #1
 8004e84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	029b      	lsls	r3, r3, #10
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	801a      	strh	r2, [r3, #0]
 8004e96:	e03b      	b.n	8004f10 <USB_EPStartXfer+0x3ba>
 8004e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea6:	f003 031f 	and.w	r3, r3, #31
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <USB_EPStartXfer+0x362>
 8004eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	029b      	lsls	r3, r3, #10
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	801a      	strh	r2, [r3, #0]
 8004ed0:	e01e      	b.n	8004f10 <USB_EPStartXfer+0x3ba>
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	785b      	ldrb	r3, [r3, #1]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d119      	bne.n	8004f10 <USB_EPStartXfer+0x3ba>
 8004edc:	1d3b      	adds	r3, r7, #4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	623b      	str	r3, [r7, #32]
 8004ee2:	1d3b      	adds	r3, r7, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	623b      	str	r3, [r7, #32]
 8004ef4:	463b      	mov	r3, r7
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	011a      	lsls	r2, r3, #4
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	4413      	add	r3, r2
 8004f00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f10:	463b      	mov	r3, r7
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	891b      	ldrh	r3, [r3, #8]
 8004f16:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6959      	ldr	r1, [r3, #20]
 8004f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f2a:	1d38      	adds	r0, r7, #4
 8004f2c:	6800      	ldr	r0, [r0, #0]
 8004f2e:	f001 f812 	bl	8005f56 <USB_WritePMA>
 8004f32:	e2fd      	b.n	8005530 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f34:	463b      	mov	r3, r7
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	785b      	ldrb	r3, [r3, #1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d164      	bne.n	8005008 <USB_EPStartXfer+0x4b2>
 8004f3e:	1d3b      	adds	r3, r7, #4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	461a      	mov	r2, r3
 8004f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f52:	4413      	add	r3, r2
 8004f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f56:	463b      	mov	r3, r7
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	011a      	lsls	r2, r3, #4
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f60:	4413      	add	r3, r2
 8004f62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f66:	647b      	str	r3, [r7, #68]	; 0x44
 8004f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d112      	bne.n	8004f96 <USB_EPStartXfer+0x440>
 8004f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	e057      	b.n	8005046 <USB_EPStartXfer+0x4f0>
 8004f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f9c:	d817      	bhi.n	8004fce <USB_EPStartXfer+0x478>
 8004f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d004      	beq.n	8004fbe <USB_EPStartXfer+0x468>
 8004fb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	029b      	lsls	r3, r3, #10
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fca:	801a      	strh	r2, [r3, #0]
 8004fcc:	e03b      	b.n	8005046 <USB_EPStartXfer+0x4f0>
 8004fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d104      	bne.n	8004fee <USB_EPStartXfer+0x498>
 8004fe4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005000:	b29a      	uxth	r2, r3
 8005002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	e01e      	b.n	8005046 <USB_EPStartXfer+0x4f0>
 8005008:	463b      	mov	r3, r7
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	785b      	ldrb	r3, [r3, #1]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d119      	bne.n	8005046 <USB_EPStartXfer+0x4f0>
 8005012:	1d3b      	adds	r3, r7, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	653b      	str	r3, [r7, #80]	; 0x50
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005020:	b29b      	uxth	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005026:	4413      	add	r3, r2
 8005028:	653b      	str	r3, [r7, #80]	; 0x50
 800502a:	463b      	mov	r3, r7
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	011a      	lsls	r2, r3, #4
 8005032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005034:	4413      	add	r3, r2
 8005036:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800503a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800503c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005040:	b29a      	uxth	r2, r3
 8005042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005044:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005046:	463b      	mov	r3, r7
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	891b      	ldrh	r3, [r3, #8]
 800504c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005050:	463b      	mov	r3, r7
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6959      	ldr	r1, [r3, #20]
 8005056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800505a:	b29b      	uxth	r3, r3
 800505c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005060:	1d38      	adds	r0, r7, #4
 8005062:	6800      	ldr	r0, [r0, #0]
 8005064:	f000 ff77 	bl	8005f56 <USB_WritePMA>
            ep->xfer_buff += len;
 8005068:	463b      	mov	r3, r7
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695a      	ldr	r2, [r3, #20]
 800506e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005072:	441a      	add	r2, r3
 8005074:	463b      	mov	r3, r7
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800507a:	463b      	mov	r3, r7
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6a1a      	ldr	r2, [r3, #32]
 8005080:	463b      	mov	r3, r7
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	429a      	cmp	r2, r3
 8005088:	d909      	bls.n	800509e <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800508a:	463b      	mov	r3, r7
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6a1a      	ldr	r2, [r3, #32]
 8005090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005094:	1ad2      	subs	r2, r2, r3
 8005096:	463b      	mov	r3, r7
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	621a      	str	r2, [r3, #32]
 800509c:	e008      	b.n	80050b0 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800509e:	463b      	mov	r3, r7
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2200      	movs	r2, #0
 80050ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050b0:	1d3b      	adds	r3, r7, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	643b      	str	r3, [r7, #64]	; 0x40
 80050b6:	463b      	mov	r3, r7
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d164      	bne.n	800518a <USB_EPStartXfer+0x634>
 80050c0:	1d3b      	adds	r3, r7, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80050c6:	1d3b      	adds	r3, r7, #4
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	4413      	add	r3, r2
 80050d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d8:	463b      	mov	r3, r7
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	011a      	lsls	r2, r3, #4
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	4413      	add	r3, r2
 80050e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d112      	bne.n	8005118 <USB_EPStartXfer+0x5c2>
 80050f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005100:	801a      	strh	r2, [r3, #0]
 8005102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800510c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005110:	b29a      	uxth	r2, r3
 8005112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005114:	801a      	strh	r2, [r3, #0]
 8005116:	e054      	b.n	80051c2 <USB_EPStartXfer+0x66c>
 8005118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800511c:	2b3e      	cmp	r3, #62	; 0x3e
 800511e:	d817      	bhi.n	8005150 <USB_EPStartXfer+0x5fa>
 8005120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005124:	085b      	lsrs	r3, r3, #1
 8005126:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800512a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <USB_EPStartXfer+0x5ea>
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513a:	3301      	adds	r3, #1
 800513c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005144:	b29b      	uxth	r3, r3
 8005146:	029b      	lsls	r3, r3, #10
 8005148:	b29a      	uxth	r2, r3
 800514a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	e038      	b.n	80051c2 <USB_EPStartXfer+0x66c>
 8005150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800515a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	2b00      	cmp	r3, #0
 8005164:	d104      	bne.n	8005170 <USB_EPStartXfer+0x61a>
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516a:	3b01      	subs	r3, #1
 800516c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005174:	b29b      	uxth	r3, r3
 8005176:	029b      	lsls	r3, r3, #10
 8005178:	b29b      	uxth	r3, r3
 800517a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005182:	b29a      	uxth	r2, r3
 8005184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005186:	801a      	strh	r2, [r3, #0]
 8005188:	e01b      	b.n	80051c2 <USB_EPStartXfer+0x66c>
 800518a:	463b      	mov	r3, r7
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	785b      	ldrb	r3, [r3, #1]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d116      	bne.n	80051c2 <USB_EPStartXfer+0x66c>
 8005194:	1d3b      	adds	r3, r7, #4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519c:	b29b      	uxth	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a2:	4413      	add	r3, r2
 80051a4:	643b      	str	r3, [r7, #64]	; 0x40
 80051a6:	463b      	mov	r3, r7
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	011a      	lsls	r2, r3, #4
 80051ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b0:	4413      	add	r3, r2
 80051b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051bc:	b29a      	uxth	r2, r3
 80051be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051c2:	463b      	mov	r3, r7
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	895b      	ldrh	r3, [r3, #10]
 80051c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051cc:	463b      	mov	r3, r7
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6959      	ldr	r1, [r3, #20]
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80051dc:	1d38      	adds	r0, r7, #4
 80051de:	6800      	ldr	r0, [r0, #0]
 80051e0:	f000 feb9 	bl	8005f56 <USB_WritePMA>
 80051e4:	e1a4      	b.n	8005530 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80051e6:	463b      	mov	r3, r7
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80051f0:	1d3b      	adds	r3, r7, #4
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	463b      	mov	r3, r7
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800520e:	1d3b      	adds	r3, r7, #4
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	463b      	mov	r3, r7
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005234:	1d3b      	adds	r3, r7, #4
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800523a:	1d3b      	adds	r3, r7, #4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005242:	b29b      	uxth	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005248:	4413      	add	r3, r2
 800524a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800524c:	463b      	mov	r3, r7
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	011a      	lsls	r2, r3, #4
 8005254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005256:	4413      	add	r3, r2
 8005258:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800525c:	65bb      	str	r3, [r7, #88]	; 0x58
 800525e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005262:	b29a      	uxth	r2, r3
 8005264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005266:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005268:	463b      	mov	r3, r7
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	891b      	ldrh	r3, [r3, #8]
 800526e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005272:	463b      	mov	r3, r7
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6959      	ldr	r1, [r3, #20]
 8005278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527c:	b29b      	uxth	r3, r3
 800527e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005282:	1d38      	adds	r0, r7, #4
 8005284:	6800      	ldr	r0, [r0, #0]
 8005286:	f000 fe66 	bl	8005f56 <USB_WritePMA>
 800528a:	e151      	b.n	8005530 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800528c:	463b      	mov	r3, r7
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6a1a      	ldr	r2, [r3, #32]
 8005292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005296:	1ad2      	subs	r2, r2, r3
 8005298:	463b      	mov	r3, r7
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	463b      	mov	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 809b 	beq.w	80053f0 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052ba:	1d3b      	adds	r3, r7, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	673b      	str	r3, [r7, #112]	; 0x70
 80052c0:	463b      	mov	r3, r7
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d164      	bne.n	8005394 <USB_EPStartXfer+0x83e>
 80052ca:	1d3b      	adds	r3, r7, #4
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d8:	b29b      	uxth	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052de:	4413      	add	r3, r2
 80052e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80052e2:	463b      	mov	r3, r7
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	011a      	lsls	r2, r3, #4
 80052ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052ec:	4413      	add	r3, r2
 80052ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052f2:	667b      	str	r3, [r7, #100]	; 0x64
 80052f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d112      	bne.n	8005322 <USB_EPStartXfer+0x7cc>
 80052fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005306:	b29a      	uxth	r2, r3
 8005308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800530a:	801a      	strh	r2, [r3, #0]
 800530c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	b29b      	uxth	r3, r3
 8005312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800531a:	b29a      	uxth	r2, r3
 800531c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800531e:	801a      	strh	r2, [r3, #0]
 8005320:	e054      	b.n	80053cc <USB_EPStartXfer+0x876>
 8005322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005326:	2b3e      	cmp	r3, #62	; 0x3e
 8005328:	d817      	bhi.n	800535a <USB_EPStartXfer+0x804>
 800532a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d004      	beq.n	800534a <USB_EPStartXfer+0x7f4>
 8005340:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005344:	3301      	adds	r3, #1
 8005346:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800534a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800534e:	b29b      	uxth	r3, r3
 8005350:	029b      	lsls	r3, r3, #10
 8005352:	b29a      	uxth	r2, r3
 8005354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	e038      	b.n	80053cc <USB_EPStartXfer+0x876>
 800535a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	2b00      	cmp	r3, #0
 800536e:	d104      	bne.n	800537a <USB_EPStartXfer+0x824>
 8005370:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005374:	3b01      	subs	r3, #1
 8005376:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800537a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800537e:	b29b      	uxth	r3, r3
 8005380:	029b      	lsls	r3, r3, #10
 8005382:	b29b      	uxth	r3, r3
 8005384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538c:	b29a      	uxth	r2, r3
 800538e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	e01b      	b.n	80053cc <USB_EPStartXfer+0x876>
 8005394:	463b      	mov	r3, r7
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d116      	bne.n	80053cc <USB_EPStartXfer+0x876>
 800539e:	1d3b      	adds	r3, r7, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ac:	4413      	add	r3, r2
 80053ae:	673b      	str	r3, [r7, #112]	; 0x70
 80053b0:	463b      	mov	r3, r7
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	011a      	lsls	r2, r3, #4
 80053b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ba:	4413      	add	r3, r2
 80053bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80053cc:	463b      	mov	r3, r7
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	895b      	ldrh	r3, [r3, #10]
 80053d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053d6:	463b      	mov	r3, r7
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6959      	ldr	r1, [r3, #20]
 80053dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053e6:	1d38      	adds	r0, r7, #4
 80053e8:	6800      	ldr	r0, [r0, #0]
 80053ea:	f000 fdb4 	bl	8005f56 <USB_WritePMA>
 80053ee:	e09f      	b.n	8005530 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053f0:	463b      	mov	r3, r7
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d164      	bne.n	80054c4 <USB_EPStartXfer+0x96e>
 80053fa:	1d3b      	adds	r3, r7, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005400:	1d3b      	adds	r3, r7, #4
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005408:	b29b      	uxth	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800540e:	4413      	add	r3, r2
 8005410:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005412:	463b      	mov	r3, r7
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	011a      	lsls	r2, r3, #4
 800541a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800541c:	4413      	add	r3, r2
 800541e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005422:	67bb      	str	r3, [r7, #120]	; 0x78
 8005424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005428:	2b00      	cmp	r3, #0
 800542a:	d112      	bne.n	8005452 <USB_EPStartXfer+0x8fc>
 800542c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005436:	b29a      	uxth	r2, r3
 8005438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800543a:	801a      	strh	r2, [r3, #0]
 800543c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544a:	b29a      	uxth	r2, r3
 800544c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800544e:	801a      	strh	r2, [r3, #0]
 8005450:	e05d      	b.n	800550e <USB_EPStartXfer+0x9b8>
 8005452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005456:	2b3e      	cmp	r3, #62	; 0x3e
 8005458:	d817      	bhi.n	800548a <USB_EPStartXfer+0x934>
 800545a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <USB_EPStartXfer+0x924>
 8005470:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005474:	3301      	adds	r3, #1
 8005476:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800547a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800547e:	b29b      	uxth	r3, r3
 8005480:	029b      	lsls	r3, r3, #10
 8005482:	b29a      	uxth	r2, r3
 8005484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	e041      	b.n	800550e <USB_EPStartXfer+0x9b8>
 800548a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	2b00      	cmp	r3, #0
 800549e:	d104      	bne.n	80054aa <USB_EPStartXfer+0x954>
 80054a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80054a4:	3b01      	subs	r3, #1
 80054a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80054aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	029b      	lsls	r3, r3, #10
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054bc:	b29a      	uxth	r2, r3
 80054be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c0:	801a      	strh	r2, [r3, #0]
 80054c2:	e024      	b.n	800550e <USB_EPStartXfer+0x9b8>
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	785b      	ldrb	r3, [r3, #1]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d11f      	bne.n	800550e <USB_EPStartXfer+0x9b8>
 80054ce:	1d3b      	adds	r3, r7, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054d6:	1d3b      	adds	r3, r7, #4
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054de:	b29b      	uxth	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054e6:	4413      	add	r3, r2
 80054e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054ec:	463b      	mov	r3, r7
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	011a      	lsls	r2, r3, #4
 80054f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f8:	4413      	add	r3, r2
 80054fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005506:	b29a      	uxth	r2, r3
 8005508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800550c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800550e:	463b      	mov	r3, r7
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	891b      	ldrh	r3, [r3, #8]
 8005514:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005518:	463b      	mov	r3, r7
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6959      	ldr	r1, [r3, #20]
 800551e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005522:	b29b      	uxth	r3, r3
 8005524:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005528:	1d38      	adds	r0, r7, #4
 800552a:	6800      	ldr	r0, [r0, #0]
 800552c:	f000 fd13 	bl	8005f56 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005530:	1d3b      	adds	r3, r7, #4
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	463b      	mov	r3, r7
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	b29b      	uxth	r3, r3
 8005542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800554a:	817b      	strh	r3, [r7, #10]
 800554c:	897b      	ldrh	r3, [r7, #10]
 800554e:	f083 0310 	eor.w	r3, r3, #16
 8005552:	817b      	strh	r3, [r7, #10]
 8005554:	897b      	ldrh	r3, [r7, #10]
 8005556:	f083 0320 	eor.w	r3, r3, #32
 800555a:	817b      	strh	r3, [r7, #10]
 800555c:	1d3b      	adds	r3, r7, #4
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	463b      	mov	r3, r7
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	441a      	add	r2, r3
 800556a:	897b      	ldrh	r3, [r7, #10]
 800556c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557c:	b29b      	uxth	r3, r3
 800557e:	8013      	strh	r3, [r2, #0]
 8005580:	e3b5      	b.n	8005cee <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005582:	463b      	mov	r3, r7
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	7b1b      	ldrb	r3, [r3, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f040 8090 	bne.w	80056ae <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800558e:	463b      	mov	r3, r7
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	429a      	cmp	r2, r3
 800559c:	d90e      	bls.n	80055bc <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800559e:	463b      	mov	r3, r7
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	463b      	mov	r3, r7
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	619a      	str	r2, [r3, #24]
 80055ba:	e008      	b.n	80055ce <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 80055bc:	463b      	mov	r3, r7
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80055c6:	463b      	mov	r3, r7
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2200      	movs	r2, #0
 80055cc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80055ce:	1d3b      	adds	r3, r7, #4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055d6:	1d3b      	adds	r3, r7, #4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055de:	b29b      	uxth	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055e6:	4413      	add	r3, r2
 80055e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055ec:	463b      	mov	r3, r7
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	011a      	lsls	r2, r3, #4
 80055f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055f8:	4413      	add	r3, r2
 80055fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005606:	2b00      	cmp	r3, #0
 8005608:	d116      	bne.n	8005638 <USB_EPStartXfer+0xae2>
 800560a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b29b      	uxth	r3, r3
 8005612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005616:	b29a      	uxth	r2, r3
 8005618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29b      	uxth	r3, r3
 8005626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562e:	b29a      	uxth	r2, r3
 8005630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	e32c      	b.n	8005c92 <USB_EPStartXfer+0x113c>
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800563c:	2b3e      	cmp	r3, #62	; 0x3e
 800563e:	d818      	bhi.n	8005672 <USB_EPStartXfer+0xb1c>
 8005640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005644:	085b      	lsrs	r3, r3, #1
 8005646:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <USB_EPStartXfer+0xb0a>
 8005656:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800565a:	3301      	adds	r3, #1
 800565c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005660:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005664:	b29b      	uxth	r3, r3
 8005666:	029b      	lsls	r3, r3, #10
 8005668:	b29a      	uxth	r2, r3
 800566a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	e30f      	b.n	8005c92 <USB_EPStartXfer+0x113c>
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800567c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	2b00      	cmp	r3, #0
 8005686:	d104      	bne.n	8005692 <USB_EPStartXfer+0xb3c>
 8005688:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800568c:	3b01      	subs	r3, #1
 800568e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005692:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005696:	b29b      	uxth	r3, r3
 8005698:	029b      	lsls	r3, r3, #10
 800569a:	b29b      	uxth	r3, r3
 800569c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e2f1      	b.n	8005c92 <USB_EPStartXfer+0x113c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80056ae:	463b      	mov	r3, r7
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	78db      	ldrb	r3, [r3, #3]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	f040 818f 	bne.w	80059d8 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80056ba:	463b      	mov	r3, r7
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d175      	bne.n	80057b0 <USB_EPStartXfer+0xc5a>
 80056c4:	1d3b      	adds	r3, r7, #4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056cc:	1d3b      	adds	r3, r7, #4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056dc:	4413      	add	r3, r2
 80056de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056e2:	463b      	mov	r3, r7
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	011a      	lsls	r2, r3, #4
 80056ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056ee:	4413      	add	r3, r2
 80056f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056f8:	463b      	mov	r3, r7
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d116      	bne.n	8005730 <USB_EPStartXfer+0xbda>
 8005702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800570e:	b29a      	uxth	r2, r3
 8005710:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005714:	801a      	strh	r2, [r3, #0]
 8005716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005726:	b29a      	uxth	r2, r3
 8005728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	e065      	b.n	80057fc <USB_EPStartXfer+0xca6>
 8005730:	463b      	mov	r3, r7
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b3e      	cmp	r3, #62	; 0x3e
 8005738:	d81a      	bhi.n	8005770 <USB_EPStartXfer+0xc1a>
 800573a:	463b      	mov	r3, r7
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005746:	463b      	mov	r3, r7
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <USB_EPStartXfer+0xc08>
 8005754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005758:	3301      	adds	r3, #1
 800575a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005762:	b29b      	uxth	r3, r3
 8005764:	029b      	lsls	r3, r3, #10
 8005766:	b29a      	uxth	r2, r3
 8005768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800576c:	801a      	strh	r2, [r3, #0]
 800576e:	e045      	b.n	80057fc <USB_EPStartXfer+0xca6>
 8005770:	463b      	mov	r3, r7
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800577c:	463b      	mov	r3, r7
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	2b00      	cmp	r3, #0
 8005788:	d104      	bne.n	8005794 <USB_EPStartXfer+0xc3e>
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578e:	3b01      	subs	r3, #1
 8005790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005798:	b29b      	uxth	r3, r3
 800579a:	029b      	lsls	r3, r3, #10
 800579c:	b29b      	uxth	r3, r3
 800579e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e025      	b.n	80057fc <USB_EPStartXfer+0xca6>
 80057b0:	463b      	mov	r3, r7
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	785b      	ldrb	r3, [r3, #1]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d120      	bne.n	80057fc <USB_EPStartXfer+0xca6>
 80057ba:	1d3b      	adds	r3, r7, #4
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057c2:	1d3b      	adds	r3, r7, #4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057d2:	4413      	add	r3, r2
 80057d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	011a      	lsls	r2, r3, #4
 80057e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057e4:	4413      	add	r3, r2
 80057e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057ee:	463b      	mov	r3, r7
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057fa:	801a      	strh	r2, [r3, #0]
 80057fc:	1d3b      	adds	r3, r7, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005804:	463b      	mov	r3, r7
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d175      	bne.n	80058fa <USB_EPStartXfer+0xda4>
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005816:	1d3b      	adds	r3, r7, #4
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800581e:	b29b      	uxth	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005826:	4413      	add	r3, r2
 8005828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	011a      	lsls	r2, r3, #4
 8005834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005838:	4413      	add	r3, r2
 800583a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800583e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005842:	463b      	mov	r3, r7
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d116      	bne.n	800587a <USB_EPStartXfer+0xd24>
 800584c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005858:	b29a      	uxth	r2, r3
 800585a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800586c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005870:	b29a      	uxth	r2, r3
 8005872:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005876:	801a      	strh	r2, [r3, #0]
 8005878:	e061      	b.n	800593e <USB_EPStartXfer+0xde8>
 800587a:	463b      	mov	r3, r7
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b3e      	cmp	r3, #62	; 0x3e
 8005882:	d81a      	bhi.n	80058ba <USB_EPStartXfer+0xd64>
 8005884:	463b      	mov	r3, r7
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005890:	463b      	mov	r3, r7
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d004      	beq.n	80058a8 <USB_EPStartXfer+0xd52>
 800589e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a2:	3301      	adds	r3, #1
 80058a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	029b      	lsls	r3, r3, #10
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	e041      	b.n	800593e <USB_EPStartXfer+0xde8>
 80058ba:	463b      	mov	r3, r7
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058c6:	463b      	mov	r3, r7
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <USB_EPStartXfer+0xd88>
 80058d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d8:	3b01      	subs	r3, #1
 80058da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	029b      	lsls	r3, r3, #10
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058f6:	801a      	strh	r2, [r3, #0]
 80058f8:	e021      	b.n	800593e <USB_EPStartXfer+0xde8>
 80058fa:	463b      	mov	r3, r7
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d11c      	bne.n	800593e <USB_EPStartXfer+0xde8>
 8005904:	1d3b      	adds	r3, r7, #4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590c:	b29b      	uxth	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005914:	4413      	add	r3, r2
 8005916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800591a:	463b      	mov	r3, r7
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	011a      	lsls	r2, r3, #4
 8005922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005926:	4413      	add	r3, r2
 8005928:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800592c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005930:	463b      	mov	r3, r7
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	b29a      	uxth	r2, r3
 8005938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800593c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800593e:	463b      	mov	r3, r7
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 81a4 	beq.w	8005c92 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800594a:	1d3b      	adds	r3, r7, #4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	463b      	mov	r3, r7
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800595e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <USB_EPStartXfer+0xe20>
 800596a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10d      	bne.n	8005992 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005976:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800597a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800597e:	2b00      	cmp	r3, #0
 8005980:	f040 8187 	bne.w	8005c92 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005984:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b00      	cmp	r3, #0
 800598e:	f040 8180 	bne.w	8005c92 <USB_EPStartXfer+0x113c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005992:	1d3b      	adds	r3, r7, #4
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	463b      	mov	r3, r7
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ac:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80059b0:	1d3b      	adds	r3, r7, #4
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	441a      	add	r2, r3
 80059be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80059c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8013      	strh	r3, [r2, #0]
 80059d6:	e15c      	b.n	8005c92 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80059d8:	463b      	mov	r3, r7
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	78db      	ldrb	r3, [r3, #3]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	f040 8155 	bne.w	8005c8e <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80059e4:	463b      	mov	r3, r7
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	463b      	mov	r3, r7
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d90e      	bls.n	8005a12 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 80059f4:	463b      	mov	r3, r7
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80059fe:	463b      	mov	r3, r7
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	699a      	ldr	r2, [r3, #24]
 8005a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a08:	1ad2      	subs	r2, r2, r3
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	619a      	str	r2, [r3, #24]
 8005a10:	e008      	b.n	8005a24 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8005a12:	463b      	mov	r3, r7
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2200      	movs	r2, #0
 8005a22:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005a24:	463b      	mov	r3, r7
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	785b      	ldrb	r3, [r3, #1]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d16f      	bne.n	8005b0e <USB_EPStartXfer+0xfb8>
 8005a2e:	1d3b      	adds	r3, r7, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a36:	1d3b      	adds	r3, r7, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a46:	4413      	add	r3, r2
 8005a48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	011a      	lsls	r2, r3, #4
 8005a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d116      	bne.n	8005a98 <USB_EPStartXfer+0xf42>
 8005a6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a7c:	801a      	strh	r2, [r3, #0]
 8005a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	e05f      	b.n	8005b58 <USB_EPStartXfer+0x1002>
 8005a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005a9e:	d818      	bhi.n	8005ad2 <USB_EPStartXfer+0xf7c>
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d004      	beq.n	8005ac0 <USB_EPStartXfer+0xf6a>
 8005ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aba:	3301      	adds	r3, #1
 8005abc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	029b      	lsls	r3, r3, #10
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	e042      	b.n	8005b58 <USB_EPStartXfer+0x1002>
 8005ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae0:	f003 031f 	and.w	r3, r3, #31
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d104      	bne.n	8005af2 <USB_EPStartXfer+0xf9c>
 8005ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aec:	3b01      	subs	r3, #1
 8005aee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	029b      	lsls	r3, r3, #10
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	e024      	b.n	8005b58 <USB_EPStartXfer+0x1002>
 8005b0e:	463b      	mov	r3, r7
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d11f      	bne.n	8005b58 <USB_EPStartXfer+0x1002>
 8005b18:	1d3b      	adds	r3, r7, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b30:	4413      	add	r3, r2
 8005b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b36:	463b      	mov	r3, r7
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	011a      	lsls	r2, r3, #4
 8005b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b42:	4413      	add	r3, r2
 8005b44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	1d3b      	adds	r3, r7, #4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b60:	463b      	mov	r3, r7
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d16f      	bne.n	8005c4a <USB_EPStartXfer+0x10f4>
 8005b6a:	1d3b      	adds	r3, r7, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005b72:	1d3b      	adds	r3, r7, #4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b82:	4413      	add	r3, r2
 8005b84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005b88:	463b      	mov	r3, r7
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	011a      	lsls	r2, r3, #4
 8005b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b94:	4413      	add	r3, r2
 8005b96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d116      	bne.n	8005bd4 <USB_EPStartXfer+0x107e>
 8005ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bb8:	801a      	strh	r2, [r3, #0]
 8005bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	e05e      	b.n	8005c92 <USB_EPStartXfer+0x113c>
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bda:	d818      	bhi.n	8005c0e <USB_EPStartXfer+0x10b8>
 8005bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <USB_EPStartXfer+0x10a6>
 8005bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	029b      	lsls	r3, r3, #10
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c0a:	801a      	strh	r2, [r3, #0]
 8005c0c:	e041      	b.n	8005c92 <USB_EPStartXfer+0x113c>
 8005c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d104      	bne.n	8005c2e <USB_EPStartXfer+0x10d8>
 8005c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	029b      	lsls	r3, r3, #10
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c46:	801a      	strh	r2, [r3, #0]
 8005c48:	e023      	b.n	8005c92 <USB_EPStartXfer+0x113c>
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d11e      	bne.n	8005c92 <USB_EPStartXfer+0x113c>
 8005c54:	1d3b      	adds	r3, r7, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c64:	4413      	add	r3, r2
 8005c66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	011a      	lsls	r2, r3, #4
 8005c72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	e001      	b.n	8005c92 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e02e      	b.n	8005cf0 <USB_EPStartXfer+0x119a>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c92:	1d3b      	adds	r3, r7, #4
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	463b      	mov	r3, r7
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005cb0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005cb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cb8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005cbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005cc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cc4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005cc8:	1d3b      	adds	r3, r7, #4
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d020      	beq.n	8005d4e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d22:	81bb      	strh	r3, [r7, #12]
 8005d24:	89bb      	ldrh	r3, [r7, #12]
 8005d26:	f083 0310 	eor.w	r3, r3, #16
 8005d2a:	81bb      	strh	r3, [r7, #12]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	441a      	add	r2, r3
 8005d36:	89bb      	ldrh	r3, [r7, #12]
 8005d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	8013      	strh	r3, [r2, #0]
 8005d4c:	e01f      	b.n	8005d8e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d64:	81fb      	strh	r3, [r7, #14]
 8005d66:	89fb      	ldrh	r3, [r7, #14]
 8005d68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d6c:	81fb      	strh	r3, [r7, #14]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	441a      	add	r2, r3
 8005d78:	89fb      	ldrh	r3, [r7, #14]
 8005d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	7b1b      	ldrb	r3, [r3, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 809d 	bne.w	8005eea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d04c      	beq.n	8005e52 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	823b      	strh	r3, [r7, #16]
 8005dc6:	8a3b      	ldrh	r3, [r7, #16]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01b      	beq.n	8005e08 <USB_EPClearStall+0x6c>
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	81fb      	strh	r3, [r7, #14]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	89fb      	ldrh	r3, [r7, #14]
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	78db      	ldrb	r3, [r3, #3]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d06c      	beq.n	8005eea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e26:	81bb      	strh	r3, [r7, #12]
 8005e28:	89bb      	ldrh	r3, [r7, #12]
 8005e2a:	f083 0320 	eor.w	r3, r3, #32
 8005e2e:	81bb      	strh	r3, [r7, #12]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	441a      	add	r2, r3
 8005e3a:	89bb      	ldrh	r3, [r7, #12]
 8005e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	8013      	strh	r3, [r2, #0]
 8005e50:	e04b      	b.n	8005eea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	82fb      	strh	r3, [r7, #22]
 8005e60:	8afb      	ldrh	r3, [r7, #22]
 8005e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d01b      	beq.n	8005ea2 <USB_EPClearStall+0x106>
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e80:	82bb      	strh	r3, [r7, #20]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	441a      	add	r2, r3
 8005e8c:	8abb      	ldrh	r3, [r7, #20]
 8005e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb8:	827b      	strh	r3, [r7, #18]
 8005eba:	8a7b      	ldrh	r3, [r7, #18]
 8005ebc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ec0:	827b      	strh	r3, [r7, #18]
 8005ec2:	8a7b      	ldrh	r3, [r7, #18]
 8005ec4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ec8:	827b      	strh	r3, [r7, #18]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	8a7b      	ldrh	r3, [r7, #18]
 8005ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d103      	bne.n	8005f12 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2280      	movs	r2, #128	; 0x80
 8005f0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f48:	68fb      	ldr	r3, [r7, #12]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b08d      	sub	sp, #52	; 0x34
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	4611      	mov	r1, r2
 8005f62:	461a      	mov	r2, r3
 8005f64:	460b      	mov	r3, r1
 8005f66:	80fb      	strh	r3, [r7, #6]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005f6c:	88bb      	ldrh	r3, [r7, #4]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	085b      	lsrs	r3, r3, #1
 8005f72:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	005a      	lsls	r2, r3, #1
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f88:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f8e:	e01e      	b.n	8005fce <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	3301      	adds	r3, #1
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	3302      	adds	r3, #2
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	3302      	adds	r3, #2
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1dd      	bne.n	8005f90 <USB_WritePMA+0x3a>
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop
 8005fd8:	3734      	adds	r7, #52	; 0x34
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b08b      	sub	sp, #44	; 0x2c
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	4611      	mov	r1, r2
 8005fee:	461a      	mov	r2, r3
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	80fb      	strh	r3, [r7, #6]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005ff8:	88bb      	ldrh	r3, [r7, #4]
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	005a      	lsls	r2, r3, #1
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006014:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
 800601a:	e01b      	b.n	8006054 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	3302      	adds	r3, #2
 8006028:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	b2da      	uxtb	r2, r3
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3301      	adds	r3, #1
 8006036:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	b2da      	uxtb	r2, r3
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	3301      	adds	r3, #1
 8006046:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	3302      	adds	r3, #2
 800604c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	3b01      	subs	r3, #1
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e0      	bne.n	800601c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800605a:	88bb      	ldrh	r3, [r7, #4]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	b29b      	uxth	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	b2da      	uxtb	r2, r3
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	701a      	strb	r2, [r3, #0]
  }
}
 8006076:	bf00      	nop
 8006078:	372c      	adds	r7, #44	; 0x2c
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	7c1b      	ldrb	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d115      	bne.n	80060c6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800609a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800609e:	2202      	movs	r2, #2
 80060a0:	2181      	movs	r1, #129	; 0x81
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 fe63 	bl	8007d6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060b2:	2202      	movs	r2, #2
 80060b4:	2101      	movs	r1, #1
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 fe59 	bl	8007d6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80060c4:	e012      	b.n	80060ec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060c6:	2340      	movs	r3, #64	; 0x40
 80060c8:	2202      	movs	r2, #2
 80060ca:	2181      	movs	r1, #129	; 0x81
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 fe4e 	bl	8007d6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060d8:	2340      	movs	r3, #64	; 0x40
 80060da:	2202      	movs	r2, #2
 80060dc:	2101      	movs	r1, #1
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f001 fe45 	bl	8007d6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80060ec:	2308      	movs	r3, #8
 80060ee:	2203      	movs	r2, #3
 80060f0:	2182      	movs	r1, #130	; 0x82
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 fe3b 	bl	8007d6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80060fe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006102:	f001 ff5d 	bl	8007fc0 <USBD_static_malloc>
 8006106:	4602      	mov	r2, r0
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	e026      	b.n	800616c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006124:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2200      	movs	r2, #0
 8006134:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	7c1b      	ldrb	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800614e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006152:	2101      	movs	r1, #1
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 fefc 	bl	8007f52 <USBD_LL_PrepareReceive>
 800615a:	e007      	b.n	800616c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006162:	2340      	movs	r3, #64	; 0x40
 8006164:	2101      	movs	r1, #1
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 fef3 	bl	8007f52 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	460b      	mov	r3, r1
 8006180:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006186:	2181      	movs	r1, #129	; 0x81
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 fe16 	bl	8007dba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006194:	2101      	movs	r1, #1
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 fe0f 	bl	8007dba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80061a4:	2182      	movs	r1, #130	; 0x82
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 fe07 	bl	8007dba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00e      	beq.n	80061da <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 ff05 	bl	8007fdc <USBD_static_free>
    pdev->pClassData = NULL;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80061da:	7bfb      	ldrb	r3, [r7, #15]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800620a:	2b00      	cmp	r3, #0
 800620c:	d039      	beq.n	8006282 <USBD_CDC_Setup+0x9e>
 800620e:	2b20      	cmp	r3, #32
 8006210:	d17f      	bne.n	8006312 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	88db      	ldrh	r3, [r3, #6]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d029      	beq.n	800626e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	b25b      	sxtb	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	da11      	bge.n	8006248 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006230:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	88d2      	ldrh	r2, [r2, #6]
 8006236:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006238:	6939      	ldr	r1, [r7, #16]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	88db      	ldrh	r3, [r3, #6]
 800623e:	461a      	mov	r2, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f001 f9e4 	bl	800760e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006246:	e06b      	b.n	8006320 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	785a      	ldrb	r2, [r3, #1]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	88db      	ldrh	r3, [r3, #6]
 8006256:	b2da      	uxtb	r2, r3
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800625e:	6939      	ldr	r1, [r7, #16]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	88db      	ldrh	r3, [r3, #6]
 8006264:	461a      	mov	r2, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f001 f9ff 	bl	800766a <USBD_CtlPrepareRx>
      break;
 800626c:	e058      	b.n	8006320 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	7850      	ldrb	r0, [r2, #1]
 800627a:	2200      	movs	r2, #0
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	4798      	blx	r3
      break;
 8006280:	e04e      	b.n	8006320 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	2b0b      	cmp	r3, #11
 8006288:	d02e      	beq.n	80062e8 <USBD_CDC_Setup+0x104>
 800628a:	2b0b      	cmp	r3, #11
 800628c:	dc38      	bgt.n	8006300 <USBD_CDC_Setup+0x11c>
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <USBD_CDC_Setup+0xb4>
 8006292:	2b0a      	cmp	r3, #10
 8006294:	d014      	beq.n	80062c0 <USBD_CDC_Setup+0xdc>
 8006296:	e033      	b.n	8006300 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d107      	bne.n	80062b2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80062a2:	f107 030c 	add.w	r3, r7, #12
 80062a6:	2202      	movs	r2, #2
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 f9af 	bl	800760e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062b0:	e02e      	b.n	8006310 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 f93f 	bl	8007538 <USBD_CtlError>
            ret = USBD_FAIL;
 80062ba:	2302      	movs	r3, #2
 80062bc:	75fb      	strb	r3, [r7, #23]
          break;
 80062be:	e027      	b.n	8006310 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d107      	bne.n	80062da <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80062ca:	f107 030f 	add.w	r3, r7, #15
 80062ce:	2201      	movs	r2, #1
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 f99b 	bl	800760e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062d8:	e01a      	b.n	8006310 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 f92b 	bl	8007538 <USBD_CtlError>
            ret = USBD_FAIL;
 80062e2:	2302      	movs	r3, #2
 80062e4:	75fb      	strb	r3, [r7, #23]
          break;
 80062e6:	e013      	b.n	8006310 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d00d      	beq.n	800630e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 f91f 	bl	8007538 <USBD_CtlError>
            ret = USBD_FAIL;
 80062fa:	2302      	movs	r3, #2
 80062fc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80062fe:	e006      	b.n	800630e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 f918 	bl	8007538 <USBD_CtlError>
          ret = USBD_FAIL;
 8006308:	2302      	movs	r3, #2
 800630a:	75fb      	strb	r3, [r7, #23]
          break;
 800630c:	e000      	b.n	8006310 <USBD_CDC_Setup+0x12c>
          break;
 800630e:	bf00      	nop
      }
      break;
 8006310:	e006      	b.n	8006320 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 f90f 	bl	8007538 <USBD_CtlError>
      ret = USBD_FAIL;
 800631a:	2302      	movs	r3, #2
 800631c:	75fb      	strb	r3, [r7, #23]
      break;
 800631e:	bf00      	nop
  }

  return ret;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	460b      	mov	r3, r1
 8006334:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006344:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634c:	2b00      	cmp	r3, #0
 800634e:	d03a      	beq.n	80063c6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006350:	78fa      	ldrb	r2, [r7, #3]
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	331c      	adds	r3, #28
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d029      	beq.n	80063ba <USBD_CDC_DataIn+0x90>
 8006366:	78fa      	ldrb	r2, [r7, #3]
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	440b      	add	r3, r1
 8006374:	331c      	adds	r3, #28
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	78f9      	ldrb	r1, [r7, #3]
 800637a:	68b8      	ldr	r0, [r7, #8]
 800637c:	460b      	mov	r3, r1
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	440b      	add	r3, r1
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	4403      	add	r3, r0
 8006386:	3338      	adds	r3, #56	; 0x38
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	fbb2 f1f3 	udiv	r1, r2, r3
 800638e:	fb03 f301 	mul.w	r3, r3, r1
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d110      	bne.n	80063ba <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006398:	78fa      	ldrb	r2, [r7, #3]
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	331c      	adds	r3, #28
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063ac:	78f9      	ldrb	r1, [r7, #3]
 80063ae:	2300      	movs	r3, #0
 80063b0:	2200      	movs	r2, #0
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 fdaa 	bl	8007f0c <USBD_LL_Transmit>
 80063b8:	e003      	b.n	80063c2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	e000      	b.n	80063c8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80063c6:	2302      	movs	r3, #2
  }
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 fdd5 	bl	8007f98 <USBD_LL_GetRxDataSize>
 80063ee:	4602      	mov	r2, r0
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00d      	beq.n	800641c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006414:	4611      	mov	r1, r2
 8006416:	4798      	blx	r3

    return USBD_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	e000      	b.n	800641e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800641c:	2302      	movs	r3, #2
  }
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b084      	sub	sp, #16
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006434:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800643c:	2b00      	cmp	r3, #0
 800643e:	d015      	beq.n	800646c <USBD_CDC_EP0_RxReady+0x46>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006446:	2bff      	cmp	r3, #255	; 0xff
 8006448:	d010      	beq.n	800646c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006458:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006460:	b292      	uxth	r2, r2
 8006462:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	22ff      	movs	r2, #255	; 0xff
 8006468:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2243      	movs	r2, #67	; 0x43
 8006484:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006486:	4b03      	ldr	r3, [pc, #12]	; (8006494 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	20000094 	.word	0x20000094

08006498 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2243      	movs	r2, #67	; 0x43
 80064a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80064a6:	4b03      	ldr	r3, [pc, #12]	; (80064b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	20000050 	.word	0x20000050

080064b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2243      	movs	r2, #67	; 0x43
 80064c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80064c6:	4b03      	ldr	r3, [pc, #12]	; (80064d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	200000d8 	.word	0x200000d8

080064d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	220a      	movs	r2, #10
 80064e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80064e6:	4b03      	ldr	r3, [pc, #12]	; (80064f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	2000000c 	.word	0x2000000c

080064f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006502:	2302      	movs	r3, #2
 8006504:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006526:	b480      	push	{r7}
 8006528:	b087      	sub	sp, #28
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	4613      	mov	r3, r2
 8006532:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006544:	88fa      	ldrh	r2, [r7, #6]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800656a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006590:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d017      	beq.n	80065cc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	7c1b      	ldrb	r3, [r3, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d109      	bne.n	80065b8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065ae:	2101      	movs	r1, #1
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 fcce 	bl	8007f52 <USBD_LL_PrepareReceive>
 80065b6:	e007      	b.n	80065c8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065be:	2340      	movs	r3, #64	; 0x40
 80065c0:	2101      	movs	r1, #1
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 fcc5 	bl	8007f52 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e000      	b.n	80065ce <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80065cc:	2302      	movs	r3, #2
  }
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	4613      	mov	r3, r2
 80065e2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80065ea:	2302      	movs	r3, #2
 80065ec:	e01a      	b.n	8006624 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	79fa      	ldrb	r2, [r7, #7]
 800661a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f001 fb31 	bl	8007c84 <USBD_LL_Init>

  return USBD_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d006      	beq.n	800664e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	73fb      	strb	r3, [r7, #15]
 800664c:	e001      	b.n	8006652 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800664e:	2302      	movs	r3, #2
 8006650:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006652:	7bfb      	ldrb	r3, [r7, #15]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 fb65 	bl	8007d38 <USBD_LL_Start>

  return USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	460b      	mov	r3, r1
 8006698:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800669a:	2302      	movs	r3, #2
 800669c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00c      	beq.n	80066c2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	4611      	mov	r1, r2
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	78fa      	ldrb	r2, [r7, #3]
 80066e2:	4611      	mov	r1, r2
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	4798      	blx	r3

  return USBD_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f000 feda 	bl	80074be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006718:	461a      	mov	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006726:	f003 031f 	and.w	r3, r3, #31
 800672a:	2b02      	cmp	r3, #2
 800672c:	d016      	beq.n	800675c <USBD_LL_SetupStage+0x6a>
 800672e:	2b02      	cmp	r3, #2
 8006730:	d81c      	bhi.n	800676c <USBD_LL_SetupStage+0x7a>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <USBD_LL_SetupStage+0x4a>
 8006736:	2b01      	cmp	r3, #1
 8006738:	d008      	beq.n	800674c <USBD_LL_SetupStage+0x5a>
 800673a:	e017      	b.n	800676c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f9cd 	bl	8006ae4 <USBD_StdDevReq>
      break;
 800674a:	e01a      	b.n	8006782 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fa2f 	bl	8006bb8 <USBD_StdItfReq>
      break;
 800675a:	e012      	b.n	8006782 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fa6f 	bl	8006c48 <USBD_StdEPReq>
      break;
 800676a:	e00a      	b.n	8006782 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006772:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006776:	b2db      	uxtb	r3, r3
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 fb3c 	bl	8007df8 <USBD_LL_StallEP>
      break;
 8006780:	bf00      	nop
  }

  return USBD_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	460b      	mov	r3, r1
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800679a:	7afb      	ldrb	r3, [r7, #11]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d14b      	bne.n	8006838 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067a6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d134      	bne.n	800681c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d919      	bls.n	80067f2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	1ad2      	subs	r2, r2, r3
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d203      	bcs.n	80067e0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80067dc:	b29b      	uxth	r3, r3
 80067de:	e002      	b.n	80067e6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	461a      	mov	r2, r3
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 ff5b 	bl	80076a6 <USBD_CtlContinueRx>
 80067f0:	e038      	b.n	8006864 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006804:	2b03      	cmp	r3, #3
 8006806:	d105      	bne.n	8006814 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 ff58 	bl	80076ca <USBD_CtlSendStatus>
 800681a:	e023      	b.n	8006864 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006822:	2b05      	cmp	r3, #5
 8006824:	d11e      	bne.n	8006864 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800682e:	2100      	movs	r1, #0
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f001 fae1 	bl	8007df8 <USBD_LL_StallEP>
 8006836:	e015      	b.n	8006864 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00d      	beq.n	8006860 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800684a:	2b03      	cmp	r3, #3
 800684c:	d108      	bne.n	8006860 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	7afa      	ldrb	r2, [r7, #11]
 8006858:	4611      	mov	r1, r2
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	4798      	blx	r3
 800685e:	e001      	b.n	8006864 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006860:	2302      	movs	r3, #2
 8006862:	e000      	b.n	8006866 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b086      	sub	sp, #24
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	460b      	mov	r3, r1
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800687c:	7afb      	ldrb	r3, [r7, #11]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d17f      	bne.n	8006982 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3314      	adds	r3, #20
 8006886:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800688e:	2b02      	cmp	r3, #2
 8006890:	d15c      	bne.n	800694c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	429a      	cmp	r2, r3
 800689c:	d915      	bls.n	80068ca <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	1ad2      	subs	r2, r2, r3
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	461a      	mov	r2, r3
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fec5 	bl	8007646 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068bc:	2300      	movs	r3, #0
 80068be:	2200      	movs	r2, #0
 80068c0:	2100      	movs	r1, #0
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f001 fb45 	bl	8007f52 <USBD_LL_PrepareReceive>
 80068c8:	e04e      	b.n	8006968 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	6912      	ldr	r2, [r2, #16]
 80068d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80068d6:	fb02 f201 	mul.w	r2, r2, r1
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11c      	bne.n	800691a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d316      	bcc.n	800691a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d20f      	bcs.n	800691a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068fa:	2200      	movs	r2, #0
 80068fc:	2100      	movs	r1, #0
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fea1 	bl	8007646 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800690c:	2300      	movs	r3, #0
 800690e:	2200      	movs	r2, #0
 8006910:	2100      	movs	r1, #0
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f001 fb1d 	bl	8007f52 <USBD_LL_PrepareReceive>
 8006918:	e026      	b.n	8006968 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800692c:	2b03      	cmp	r3, #3
 800692e:	d105      	bne.n	800693c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800693c:	2180      	movs	r1, #128	; 0x80
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f001 fa5a 	bl	8007df8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 fed3 	bl	80076f0 <USBD_CtlReceiveStatus>
 800694a:	e00d      	b.n	8006968 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006952:	2b04      	cmp	r3, #4
 8006954:	d004      	beq.n	8006960 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800695c:	2b00      	cmp	r3, #0
 800695e:	d103      	bne.n	8006968 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006960:	2180      	movs	r1, #128	; 0x80
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f001 fa48 	bl	8007df8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800696e:	2b01      	cmp	r3, #1
 8006970:	d11d      	bne.n	80069ae <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff fe80 	bl	8006678 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006980:	e015      	b.n	80069ae <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00d      	beq.n	80069aa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006994:	2b03      	cmp	r3, #3
 8006996:	d108      	bne.n	80069aa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	7afa      	ldrb	r2, [r7, #11]
 80069a2:	4611      	mov	r1, r2
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	4798      	blx	r3
 80069a8:	e001      	b.n	80069ae <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069aa:	2302      	movs	r3, #2
 80069ac:	e000      	b.n	80069b0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069c0:	2340      	movs	r3, #64	; 0x40
 80069c2:	2200      	movs	r2, #0
 80069c4:	2100      	movs	r1, #0
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 f9d1 	bl	8007d6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2240      	movs	r2, #64	; 0x40
 80069d8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069dc:	2340      	movs	r3, #64	; 0x40
 80069de:	2200      	movs	r2, #0
 80069e0:	2180      	movs	r1, #128	; 0x80
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 f9c3 	bl	8007d6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2240      	movs	r2, #64	; 0x40
 80069f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d009      	beq.n	8006a30 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6852      	ldr	r2, [r2, #4]
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	4798      	blx	r3
  }

  return USBD_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	460b      	mov	r3, r1
 8006a44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	78fa      	ldrb	r2, [r7, #3]
 8006a4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2204      	movs	r2, #4
 8006a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d105      	bne.n	8006aa2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d10b      	bne.n	8006ada <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006afa:	2b40      	cmp	r3, #64	; 0x40
 8006afc:	d005      	beq.n	8006b0a <USBD_StdDevReq+0x26>
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d84f      	bhi.n	8006ba2 <USBD_StdDevReq+0xbe>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <USBD_StdDevReq+0x36>
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d14b      	bne.n	8006ba2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
      break;
 8006b18:	e048      	b.n	8006bac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	785b      	ldrb	r3, [r3, #1]
 8006b1e:	2b09      	cmp	r3, #9
 8006b20:	d839      	bhi.n	8006b96 <USBD_StdDevReq+0xb2>
 8006b22:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <USBD_StdDevReq+0x44>)
 8006b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b28:	08006b79 	.word	0x08006b79
 8006b2c:	08006b8d 	.word	0x08006b8d
 8006b30:	08006b97 	.word	0x08006b97
 8006b34:	08006b83 	.word	0x08006b83
 8006b38:	08006b97 	.word	0x08006b97
 8006b3c:	08006b5b 	.word	0x08006b5b
 8006b40:	08006b51 	.word	0x08006b51
 8006b44:	08006b97 	.word	0x08006b97
 8006b48:	08006b6f 	.word	0x08006b6f
 8006b4c:	08006b65 	.word	0x08006b65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f9dc 	bl	8006f10 <USBD_GetDescriptor>
          break;
 8006b58:	e022      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fb3f 	bl	80071e0 <USBD_SetAddress>
          break;
 8006b62:	e01d      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fb7e 	bl	8007268 <USBD_SetConfig>
          break;
 8006b6c:	e018      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fc07 	bl	8007384 <USBD_GetConfig>
          break;
 8006b76:	e013      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fc37 	bl	80073ee <USBD_GetStatus>
          break;
 8006b80:	e00e      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fc65 	bl	8007454 <USBD_SetFeature>
          break;
 8006b8a:	e009      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fc74 	bl	800747c <USBD_ClrFeature>
          break;
 8006b94:	e004      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fccd 	bl	8007538 <USBD_CtlError>
          break;
 8006b9e:	bf00      	nop
      }
      break;
 8006ba0:	e004      	b.n	8006bac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fcc7 	bl	8007538 <USBD_CtlError>
      break;
 8006baa:	bf00      	nop
  }

  return ret;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop

08006bb8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d005      	beq.n	8006bde <USBD_StdItfReq+0x26>
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	d82e      	bhi.n	8006c34 <USBD_StdItfReq+0x7c>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <USBD_StdItfReq+0x26>
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d12a      	bne.n	8006c34 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be4:	3b01      	subs	r3, #1
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d81d      	bhi.n	8006c26 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	889b      	ldrh	r3, [r3, #4]
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d813      	bhi.n	8006c1c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	4798      	blx	r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	88db      	ldrh	r3, [r3, #6]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d110      	bne.n	8006c30 <USBD_StdItfReq+0x78>
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10d      	bne.n	8006c30 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fd58 	bl	80076ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c1a:	e009      	b.n	8006c30 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fc8a 	bl	8007538 <USBD_CtlError>
          break;
 8006c24:	e004      	b.n	8006c30 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fc85 	bl	8007538 <USBD_CtlError>
          break;
 8006c2e:	e000      	b.n	8006c32 <USBD_StdItfReq+0x7a>
          break;
 8006c30:	bf00      	nop
      }
      break;
 8006c32:	e004      	b.n	8006c3e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fc7e 	bl	8007538 <USBD_CtlError>
      break;
 8006c3c:	bf00      	nop
  }

  return USBD_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	889b      	ldrh	r3, [r3, #4]
 8006c5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c64:	2b40      	cmp	r3, #64	; 0x40
 8006c66:	d007      	beq.n	8006c78 <USBD_StdEPReq+0x30>
 8006c68:	2b40      	cmp	r3, #64	; 0x40
 8006c6a:	f200 8146 	bhi.w	8006efa <USBD_StdEPReq+0x2b2>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <USBD_StdEPReq+0x40>
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	f040 8141 	bne.w	8006efa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	4798      	blx	r3
      break;
 8006c86:	e13d      	b.n	8006f04 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d10a      	bne.n	8006caa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	4798      	blx	r3
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	e12d      	b.n	8006f06 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	785b      	ldrb	r3, [r3, #1]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d007      	beq.n	8006cc2 <USBD_StdEPReq+0x7a>
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	f300 811b 	bgt.w	8006eee <USBD_StdEPReq+0x2a6>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d072      	beq.n	8006da2 <USBD_StdEPReq+0x15a>
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d03a      	beq.n	8006d36 <USBD_StdEPReq+0xee>
 8006cc0:	e115      	b.n	8006eee <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d002      	beq.n	8006cd2 <USBD_StdEPReq+0x8a>
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d015      	beq.n	8006cfc <USBD_StdEPReq+0xb4>
 8006cd0:	e02b      	b.n	8006d2a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00c      	beq.n	8006cf2 <USBD_StdEPReq+0xaa>
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	2b80      	cmp	r3, #128	; 0x80
 8006cdc:	d009      	beq.n	8006cf2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 f888 	bl	8007df8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ce8:	2180      	movs	r1, #128	; 0x80
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 f884 	bl	8007df8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cf0:	e020      	b.n	8006d34 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fc1f 	bl	8007538 <USBD_CtlError>
              break;
 8006cfa:	e01b      	b.n	8006d34 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	885b      	ldrh	r3, [r3, #2]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10e      	bne.n	8006d22 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00b      	beq.n	8006d22 <USBD_StdEPReq+0xda>
 8006d0a:	7bbb      	ldrb	r3, [r7, #14]
 8006d0c:	2b80      	cmp	r3, #128	; 0x80
 8006d0e:	d008      	beq.n	8006d22 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	88db      	ldrh	r3, [r3, #6]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 f86b 	bl	8007df8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fcd1 	bl	80076ca <USBD_CtlSendStatus>

              break;
 8006d28:	e004      	b.n	8006d34 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fc03 	bl	8007538 <USBD_CtlError>
              break;
 8006d32:	bf00      	nop
          }
          break;
 8006d34:	e0e0      	b.n	8006ef8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d002      	beq.n	8006d46 <USBD_StdEPReq+0xfe>
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d015      	beq.n	8006d70 <USBD_StdEPReq+0x128>
 8006d44:	e026      	b.n	8006d94 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00c      	beq.n	8006d66 <USBD_StdEPReq+0x11e>
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	2b80      	cmp	r3, #128	; 0x80
 8006d50:	d009      	beq.n	8006d66 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 f84e 	bl	8007df8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d5c:	2180      	movs	r1, #128	; 0x80
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 f84a 	bl	8007df8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d64:	e01c      	b.n	8006da0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fbe5 	bl	8007538 <USBD_CtlError>
              break;
 8006d6e:	e017      	b.n	8006da0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	885b      	ldrh	r3, [r3, #2]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d112      	bne.n	8006d9e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d004      	beq.n	8006d8c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 f855 	bl	8007e36 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fc9c 	bl	80076ca <USBD_CtlSendStatus>
              }
              break;
 8006d92:	e004      	b.n	8006d9e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fbce 	bl	8007538 <USBD_CtlError>
              break;
 8006d9c:	e000      	b.n	8006da0 <USBD_StdEPReq+0x158>
              break;
 8006d9e:	bf00      	nop
          }
          break;
 8006da0:	e0aa      	b.n	8006ef8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d002      	beq.n	8006db2 <USBD_StdEPReq+0x16a>
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d032      	beq.n	8006e16 <USBD_StdEPReq+0x1ce>
 8006db0:	e097      	b.n	8006ee2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <USBD_StdEPReq+0x180>
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
 8006dba:	2b80      	cmp	r3, #128	; 0x80
 8006dbc:	d004      	beq.n	8006dc8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fbb9 	bl	8007538 <USBD_CtlError>
                break;
 8006dc6:	e091      	b.n	8006eec <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	da0b      	bge.n	8006de8 <USBD_StdEPReq+0x1a0>
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	3310      	adds	r3, #16
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	4413      	add	r3, r2
 8006de4:	3304      	adds	r3, #4
 8006de6:	e00b      	b.n	8006e00 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dee:	4613      	mov	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	3304      	adds	r3, #4
 8006e00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fbfd 	bl	800760e <USBD_CtlSendData>
              break;
 8006e14:	e06a      	b.n	8006eec <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	da11      	bge.n	8006e42 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e1e:	7bbb      	ldrb	r3, [r7, #14]
 8006e20:	f003 020f 	and.w	r2, r3, #15
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	3318      	adds	r3, #24
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d117      	bne.n	8006e68 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fb7c 	bl	8007538 <USBD_CtlError>
                  break;
 8006e40:	e054      	b.n	8006eec <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	f003 020f 	and.w	r2, r3, #15
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fb69 	bl	8007538 <USBD_CtlError>
                  break;
 8006e66:	e041      	b.n	8006eec <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	da0b      	bge.n	8006e88 <USBD_StdEPReq+0x240>
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	3310      	adds	r3, #16
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	4413      	add	r3, r2
 8006e84:	3304      	adds	r3, #4
 8006e86:	e00b      	b.n	8006ea0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
 8006e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e8e:	4613      	mov	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <USBD_StdEPReq+0x266>
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	2b80      	cmp	r3, #128	; 0x80
 8006eac:	d103      	bne.n	8006eb6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e00e      	b.n	8006ed4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 ffda 	bl	8007e74 <USBD_LL_IsStallEP>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	e002      	b.n	8006ed4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fb97 	bl	800760e <USBD_CtlSendData>
              break;
 8006ee0:	e004      	b.n	8006eec <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fb27 	bl	8007538 <USBD_CtlError>
              break;
 8006eea:	bf00      	nop
          }
          break;
 8006eec:	e004      	b.n	8006ef8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fb21 	bl	8007538 <USBD_CtlError>
          break;
 8006ef6:	bf00      	nop
      }
      break;
 8006ef8:	e004      	b.n	8006f04 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fb1b 	bl	8007538 <USBD_CtlError>
      break;
 8006f02:	bf00      	nop
  }

  return ret;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	885b      	ldrh	r3, [r3, #2]
 8006f2a:	0a1b      	lsrs	r3, r3, #8
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	2b06      	cmp	r3, #6
 8006f32:	f200 8128 	bhi.w	8007186 <USBD_GetDescriptor+0x276>
 8006f36:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <USBD_GetDescriptor+0x2c>)
 8006f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3c:	08006f59 	.word	0x08006f59
 8006f40:	08006f71 	.word	0x08006f71
 8006f44:	08006fb1 	.word	0x08006fb1
 8006f48:	08007187 	.word	0x08007187
 8006f4c:	08007187 	.word	0x08007187
 8006f50:	08007127 	.word	0x08007127
 8006f54:	08007153 	.word	0x08007153
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	7c12      	ldrb	r2, [r2, #16]
 8006f64:	f107 0108 	add.w	r1, r7, #8
 8006f68:	4610      	mov	r0, r2
 8006f6a:	4798      	blx	r3
 8006f6c:	60f8      	str	r0, [r7, #12]
      break;
 8006f6e:	e112      	b.n	8007196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	7c1b      	ldrb	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10d      	bne.n	8006f94 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f80:	f107 0208 	add.w	r2, r7, #8
 8006f84:	4610      	mov	r0, r2
 8006f86:	4798      	blx	r3
 8006f88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	2202      	movs	r2, #2
 8006f90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f92:	e100      	b.n	8007196 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	f107 0208 	add.w	r2, r7, #8
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4798      	blx	r3
 8006fa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	2202      	movs	r2, #2
 8006fac:	701a      	strb	r2, [r3, #0]
      break;
 8006fae:	e0f2      	b.n	8007196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	885b      	ldrh	r3, [r3, #2]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b05      	cmp	r3, #5
 8006fb8:	f200 80ac 	bhi.w	8007114 <USBD_GetDescriptor+0x204>
 8006fbc:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <USBD_GetDescriptor+0xb4>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08006fdd 	.word	0x08006fdd
 8006fc8:	08007011 	.word	0x08007011
 8006fcc:	08007045 	.word	0x08007045
 8006fd0:	08007079 	.word	0x08007079
 8006fd4:	080070ad 	.word	0x080070ad
 8006fd8:	080070e1 	.word	0x080070e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	f107 0108 	add.w	r1, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ffe:	e091      	b.n	8007124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa98 	bl	8007538 <USBD_CtlError>
            err++;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	3301      	adds	r3, #1
 800700c:	72fb      	strb	r3, [r7, #11]
          break;
 800700e:	e089      	b.n	8007124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00b      	beq.n	8007034 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7c12      	ldrb	r2, [r2, #16]
 8007028:	f107 0108 	add.w	r1, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007032:	e077      	b.n	8007124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa7e 	bl	8007538 <USBD_CtlError>
            err++;
 800703c:	7afb      	ldrb	r3, [r7, #11]
 800703e:	3301      	adds	r3, #1
 8007040:	72fb      	strb	r3, [r7, #11]
          break;
 8007042:	e06f      	b.n	8007124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00b      	beq.n	8007068 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	7c12      	ldrb	r2, [r2, #16]
 800705c:	f107 0108 	add.w	r1, r7, #8
 8007060:	4610      	mov	r0, r2
 8007062:	4798      	blx	r3
 8007064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007066:	e05d      	b.n	8007124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa64 	bl	8007538 <USBD_CtlError>
            err++;
 8007070:	7afb      	ldrb	r3, [r7, #11]
 8007072:	3301      	adds	r3, #1
 8007074:	72fb      	strb	r3, [r7, #11]
          break;
 8007076:	e055      	b.n	8007124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	7c12      	ldrb	r2, [r2, #16]
 8007090:	f107 0108 	add.w	r1, r7, #8
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
 8007098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800709a:	e043      	b.n	8007124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa4a 	bl	8007538 <USBD_CtlError>
            err++;
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	3301      	adds	r3, #1
 80070a8:	72fb      	strb	r3, [r7, #11]
          break;
 80070aa:	e03b      	b.n	8007124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	7c12      	ldrb	r2, [r2, #16]
 80070c4:	f107 0108 	add.w	r1, r7, #8
 80070c8:	4610      	mov	r0, r2
 80070ca:	4798      	blx	r3
 80070cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ce:	e029      	b.n	8007124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa30 	bl	8007538 <USBD_CtlError>
            err++;
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	3301      	adds	r3, #1
 80070dc:	72fb      	strb	r3, [r7, #11]
          break;
 80070de:	e021      	b.n	8007124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	7c12      	ldrb	r2, [r2, #16]
 80070f8:	f107 0108 	add.w	r1, r7, #8
 80070fc:	4610      	mov	r0, r2
 80070fe:	4798      	blx	r3
 8007100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007102:	e00f      	b.n	8007124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fa16 	bl	8007538 <USBD_CtlError>
            err++;
 800710c:	7afb      	ldrb	r3, [r7, #11]
 800710e:	3301      	adds	r3, #1
 8007110:	72fb      	strb	r3, [r7, #11]
          break;
 8007112:	e007      	b.n	8007124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa0e 	bl	8007538 <USBD_CtlError>
          err++;
 800711c:	7afb      	ldrb	r3, [r7, #11]
 800711e:	3301      	adds	r3, #1
 8007120:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007122:	e038      	b.n	8007196 <USBD_GetDescriptor+0x286>
 8007124:	e037      	b.n	8007196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	7c1b      	ldrb	r3, [r3, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007136:	f107 0208 	add.w	r2, r7, #8
 800713a:	4610      	mov	r0, r2
 800713c:	4798      	blx	r3
 800713e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007140:	e029      	b.n	8007196 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f9f7 	bl	8007538 <USBD_CtlError>
        err++;
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	3301      	adds	r3, #1
 800714e:	72fb      	strb	r3, [r7, #11]
      break;
 8007150:	e021      	b.n	8007196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	7c1b      	ldrb	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10d      	bne.n	8007176 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007162:	f107 0208 	add.w	r2, r7, #8
 8007166:	4610      	mov	r0, r2
 8007168:	4798      	blx	r3
 800716a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3301      	adds	r3, #1
 8007170:	2207      	movs	r2, #7
 8007172:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007174:	e00f      	b.n	8007196 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f9dd 	bl	8007538 <USBD_CtlError>
        err++;
 800717e:	7afb      	ldrb	r3, [r7, #11]
 8007180:	3301      	adds	r3, #1
 8007182:	72fb      	strb	r3, [r7, #11]
      break;
 8007184:	e007      	b.n	8007196 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f9d5 	bl	8007538 <USBD_CtlError>
      err++;
 800718e:	7afb      	ldrb	r3, [r7, #11]
 8007190:	3301      	adds	r3, #1
 8007192:	72fb      	strb	r3, [r7, #11]
      break;
 8007194:	bf00      	nop
  }

  if (err != 0U)
 8007196:	7afb      	ldrb	r3, [r7, #11]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d11c      	bne.n	80071d6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800719c:	893b      	ldrh	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d011      	beq.n	80071c6 <USBD_GetDescriptor+0x2b6>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	88db      	ldrh	r3, [r3, #6]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00d      	beq.n	80071c6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	88da      	ldrh	r2, [r3, #6]
 80071ae:	893b      	ldrh	r3, [r7, #8]
 80071b0:	4293      	cmp	r3, r2
 80071b2:	bf28      	it	cs
 80071b4:	4613      	movcs	r3, r2
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80071ba:	893b      	ldrh	r3, [r7, #8]
 80071bc:	461a      	mov	r2, r3
 80071be:	68f9      	ldr	r1, [r7, #12]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fa24 	bl	800760e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	88db      	ldrh	r3, [r3, #6]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa7b 	bl	80076ca <USBD_CtlSendStatus>
 80071d4:	e000      	b.n	80071d8 <USBD_GetDescriptor+0x2c8>
    return;
 80071d6:	bf00      	nop
    }
  }
}
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop

080071e0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	889b      	ldrh	r3, [r3, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d130      	bne.n	8007254 <USBD_SetAddress+0x74>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	88db      	ldrh	r3, [r3, #6]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d12c      	bne.n	8007254 <USBD_SetAddress+0x74>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	885b      	ldrh	r3, [r3, #2]
 80071fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007200:	d828      	bhi.n	8007254 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007214:	2b03      	cmp	r3, #3
 8007216:	d104      	bne.n	8007222 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f98c 	bl	8007538 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007220:	e01d      	b.n	800725e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	7bfa      	ldrb	r2, [r7, #15]
 8007226:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fe4d 	bl	8007ece <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fa48 	bl	80076ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d004      	beq.n	800724a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007248:	e009      	b.n	800725e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007252:	e004      	b.n	800725e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f96e 	bl	8007538 <USBD_CtlError>
  }
}
 800725c:	bf00      	nop
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	885b      	ldrh	r3, [r3, #2]
 8007276:	b2da      	uxtb	r2, r3
 8007278:	4b41      	ldr	r3, [pc, #260]	; (8007380 <USBD_SetConfig+0x118>)
 800727a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800727c:	4b40      	ldr	r3, [pc, #256]	; (8007380 <USBD_SetConfig+0x118>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d904      	bls.n	800728e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f956 	bl	8007538 <USBD_CtlError>
 800728c:	e075      	b.n	800737a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007294:	2b02      	cmp	r3, #2
 8007296:	d002      	beq.n	800729e <USBD_SetConfig+0x36>
 8007298:	2b03      	cmp	r3, #3
 800729a:	d023      	beq.n	80072e4 <USBD_SetConfig+0x7c>
 800729c:	e062      	b.n	8007364 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800729e:	4b38      	ldr	r3, [pc, #224]	; (8007380 <USBD_SetConfig+0x118>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01a      	beq.n	80072dc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80072a6:	4b36      	ldr	r3, [pc, #216]	; (8007380 <USBD_SetConfig+0x118>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2203      	movs	r2, #3
 80072b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072b8:	4b31      	ldr	r3, [pc, #196]	; (8007380 <USBD_SetConfig+0x118>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff f9e5 	bl	800668e <USBD_SetClassConfig>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d104      	bne.n	80072d4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f933 	bl	8007538 <USBD_CtlError>
            return;
 80072d2:	e052      	b.n	800737a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f9f8 	bl	80076ca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80072da:	e04e      	b.n	800737a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f9f4 	bl	80076ca <USBD_CtlSendStatus>
        break;
 80072e2:	e04a      	b.n	800737a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80072e4:	4b26      	ldr	r3, [pc, #152]	; (8007380 <USBD_SetConfig+0x118>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d112      	bne.n	8007312 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80072f4:	4b22      	ldr	r3, [pc, #136]	; (8007380 <USBD_SetConfig+0x118>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80072fe:	4b20      	ldr	r3, [pc, #128]	; (8007380 <USBD_SetConfig+0x118>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff f9e1 	bl	80066cc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f9dd 	bl	80076ca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007310:	e033      	b.n	800737a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007312:	4b1b      	ldr	r3, [pc, #108]	; (8007380 <USBD_SetConfig+0x118>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d01d      	beq.n	800735c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	b2db      	uxtb	r3, r3
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff f9cf 	bl	80066cc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800732e:	4b14      	ldr	r3, [pc, #80]	; (8007380 <USBD_SetConfig+0x118>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007338:	4b11      	ldr	r3, [pc, #68]	; (8007380 <USBD_SetConfig+0x118>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff f9a5 	bl	800668e <USBD_SetClassConfig>
 8007344:	4603      	mov	r3, r0
 8007346:	2b02      	cmp	r3, #2
 8007348:	d104      	bne.n	8007354 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f8f3 	bl	8007538 <USBD_CtlError>
            return;
 8007352:	e012      	b.n	800737a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f9b8 	bl	80076ca <USBD_CtlSendStatus>
        break;
 800735a:	e00e      	b.n	800737a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f9b4 	bl	80076ca <USBD_CtlSendStatus>
        break;
 8007362:	e00a      	b.n	800737a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f8e6 	bl	8007538 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800736c:	4b04      	ldr	r3, [pc, #16]	; (8007380 <USBD_SetConfig+0x118>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff f9aa 	bl	80066cc <USBD_ClrClassConfig>
        break;
 8007378:	bf00      	nop
    }
  }
}
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	20000198 	.word	0x20000198

08007384 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	88db      	ldrh	r3, [r3, #6]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d004      	beq.n	80073a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f8cd 	bl	8007538 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800739e:	e022      	b.n	80073e6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	dc02      	bgt.n	80073b0 <USBD_GetConfig+0x2c>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	dc03      	bgt.n	80073b6 <USBD_GetConfig+0x32>
 80073ae:	e015      	b.n	80073dc <USBD_GetConfig+0x58>
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d00b      	beq.n	80073cc <USBD_GetConfig+0x48>
 80073b4:	e012      	b.n	80073dc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3308      	adds	r3, #8
 80073c0:	2201      	movs	r2, #1
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f922 	bl	800760e <USBD_CtlSendData>
        break;
 80073ca:	e00c      	b.n	80073e6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3304      	adds	r3, #4
 80073d0:	2201      	movs	r2, #1
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f91a 	bl	800760e <USBD_CtlSendData>
        break;
 80073da:	e004      	b.n	80073e6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f8aa 	bl	8007538 <USBD_CtlError>
        break;
 80073e4:	bf00      	nop
}
 80073e6:	bf00      	nop
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073fe:	3b01      	subs	r3, #1
 8007400:	2b02      	cmp	r3, #2
 8007402:	d81e      	bhi.n	8007442 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	88db      	ldrh	r3, [r3, #6]
 8007408:	2b02      	cmp	r3, #2
 800740a:	d004      	beq.n	8007416 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f892 	bl	8007538 <USBD_CtlError>
        break;
 8007414:	e01a      	b.n	800744c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f043 0202 	orr.w	r2, r3, #2
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	330c      	adds	r3, #12
 8007436:	2202      	movs	r2, #2
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f8e7 	bl	800760e <USBD_CtlSendData>
      break;
 8007440:	e004      	b.n	800744c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f877 	bl	8007538 <USBD_CtlError>
      break;
 800744a:	bf00      	nop
  }
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	885b      	ldrh	r3, [r3, #2]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d106      	bne.n	8007474 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f92b 	bl	80076ca <USBD_CtlSendStatus>
  }
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748c:	3b01      	subs	r3, #1
 800748e:	2b02      	cmp	r3, #2
 8007490:	d80b      	bhi.n	80074aa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	885b      	ldrh	r3, [r3, #2]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d10c      	bne.n	80074b4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f911 	bl	80076ca <USBD_CtlSendStatus>
      }
      break;
 80074a8:	e004      	b.n	80074b4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f843 	bl	8007538 <USBD_CtlError>
      break;
 80074b2:	e000      	b.n	80074b6 <USBD_ClrFeature+0x3a>
      break;
 80074b4:	bf00      	nop
  }
}
 80074b6:	bf00      	nop
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781a      	ldrb	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	785a      	ldrb	r2, [r3, #1]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	3302      	adds	r3, #2
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	b29a      	uxth	r2, r3
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	3303      	adds	r3, #3
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	3304      	adds	r3, #4
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	3305      	adds	r3, #5
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	b29b      	uxth	r3, r3
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	b29b      	uxth	r3, r3
 8007508:	4413      	add	r3, r2
 800750a:	b29a      	uxth	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	3306      	adds	r3, #6
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	b29a      	uxth	r2, r3
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	3307      	adds	r3, #7
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	b29b      	uxth	r3, r3
 8007524:	4413      	add	r3, r2
 8007526:	b29a      	uxth	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	80da      	strh	r2, [r3, #6]

}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007542:	2180      	movs	r1, #128	; 0x80
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fc57 	bl	8007df8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800754a:	2100      	movs	r1, #0
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fc53 	bl	8007df8 <USBD_LL_StallEP>
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d032      	beq.n	80075d6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 f834 	bl	80075de <USBD_GetLen>
 8007576:	4603      	mov	r3, r0
 8007578:	3301      	adds	r3, #1
 800757a:	b29b      	uxth	r3, r3
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	75fa      	strb	r2, [r7, #23]
 800758a:	461a      	mov	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4413      	add	r3, r2
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	7812      	ldrb	r2, [r2, #0]
 8007594:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007596:	7dfb      	ldrb	r3, [r7, #23]
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	75fa      	strb	r2, [r7, #23]
 800759c:	461a      	mov	r2, r3
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	4413      	add	r3, r2
 80075a2:	2203      	movs	r2, #3
 80075a4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80075a6:	e012      	b.n	80075ce <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	60fa      	str	r2, [r7, #12]
 80075ae:	7dfa      	ldrb	r2, [r7, #23]
 80075b0:	1c51      	adds	r1, r2, #1
 80075b2:	75f9      	strb	r1, [r7, #23]
 80075b4:	4611      	mov	r1, r2
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	440a      	add	r2, r1
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	75fa      	strb	r2, [r7, #23]
 80075c4:	461a      	mov	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4413      	add	r3, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e8      	bne.n	80075a8 <USBD_GetString+0x4e>
    }
  }
}
 80075d6:	bf00      	nop
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80075ea:	e005      	b.n	80075f8 <USBD_GetLen+0x1a>
  {
    len++;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	3301      	adds	r3, #1
 80075f0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3301      	adds	r3, #1
 80075f6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f5      	bne.n	80075ec <USBD_GetLen+0xe>
  }

  return len;
 8007600:	7bfb      	ldrb	r3, [r7, #15]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	4613      	mov	r3, r2
 800761a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2202      	movs	r2, #2
 8007620:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007624:	88fa      	ldrh	r2, [r7, #6]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800762a:	88fa      	ldrh	r2, [r7, #6]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007630:	88fb      	ldrh	r3, [r7, #6]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	2100      	movs	r1, #0
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 fc68 	bl	8007f0c <USBD_LL_Transmit>

  return USBD_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	4613      	mov	r3, r2
 8007652:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007654:	88fb      	ldrh	r3, [r7, #6]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	2100      	movs	r1, #0
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 fc56 	bl	8007f0c <USBD_LL_Transmit>

  return USBD_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	4613      	mov	r3, r2
 8007676:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2203      	movs	r2, #3
 800767c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007680:	88fa      	ldrh	r2, [r7, #6]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007688:	88fa      	ldrh	r2, [r7, #6]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007690:	88fb      	ldrh	r3, [r7, #6]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	2100      	movs	r1, #0
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fc5b 	bl	8007f52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	4613      	mov	r3, r2
 80076b2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076b4:	88fb      	ldrh	r3, [r7, #6]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	2100      	movs	r1, #0
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fc49 	bl	8007f52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2204      	movs	r2, #4
 80076d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076da:	2300      	movs	r3, #0
 80076dc:	2200      	movs	r2, #0
 80076de:	2100      	movs	r1, #0
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fc13 	bl	8007f0c <USBD_LL_Transmit>

  return USBD_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2205      	movs	r2, #5
 80076fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007700:	2300      	movs	r3, #0
 8007702:	2200      	movs	r2, #0
 8007704:	2100      	movs	r1, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fc23 	bl	8007f52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800771c:	2200      	movs	r2, #0
 800771e:	4912      	ldr	r1, [pc, #72]	; (8007768 <MX_USB_DEVICE_Init+0x50>)
 8007720:	4812      	ldr	r0, [pc, #72]	; (800776c <MX_USB_DEVICE_Init+0x54>)
 8007722:	f7fe ff58 	bl	80065d6 <USBD_Init>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800772c:	f7f8 feba 	bl	80004a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007730:	490f      	ldr	r1, [pc, #60]	; (8007770 <MX_USB_DEVICE_Init+0x58>)
 8007732:	480e      	ldr	r0, [pc, #56]	; (800776c <MX_USB_DEVICE_Init+0x54>)
 8007734:	f7fe ff7a 	bl	800662c <USBD_RegisterClass>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800773e:	f7f8 feb1 	bl	80004a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007742:	490c      	ldr	r1, [pc, #48]	; (8007774 <MX_USB_DEVICE_Init+0x5c>)
 8007744:	4809      	ldr	r0, [pc, #36]	; (800776c <MX_USB_DEVICE_Init+0x54>)
 8007746:	f7fe fed7 	bl	80064f8 <USBD_CDC_RegisterInterface>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007750:	f7f8 fea8 	bl	80004a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007754:	4805      	ldr	r0, [pc, #20]	; (800776c <MX_USB_DEVICE_Init+0x54>)
 8007756:	f7fe ff83 	bl	8006660 <USBD_Start>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007760:	f7f8 fea0 	bl	80004a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007764:	bf00      	nop
 8007766:	bd80      	pop	{r7, pc}
 8007768:	2000012c 	.word	0x2000012c
 800776c:	20000470 	.word	0x20000470
 8007770:	20000018 	.word	0x20000018
 8007774:	2000011c 	.word	0x2000011c

08007778 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800777c:	2200      	movs	r2, #0
 800777e:	4905      	ldr	r1, [pc, #20]	; (8007794 <CDC_Init_FS+0x1c>)
 8007780:	4805      	ldr	r0, [pc, #20]	; (8007798 <CDC_Init_FS+0x20>)
 8007782:	f7fe fed0 	bl	8006526 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007786:	4905      	ldr	r1, [pc, #20]	; (800779c <CDC_Init_FS+0x24>)
 8007788:	4803      	ldr	r0, [pc, #12]	; (8007798 <CDC_Init_FS+0x20>)
 800778a:	f7fe fee6 	bl	800655a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800778e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007790:	4618      	mov	r0, r3
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20000b1c 	.word	0x20000b1c
 8007798:	20000470 	.word	0x20000470
 800779c:	20000734 	.word	0x20000734

080077a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077a0:	b480      	push	{r7}
 80077a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	6039      	str	r1, [r7, #0]
 80077ba:	71fb      	strb	r3, [r7, #7]
 80077bc:	4613      	mov	r3, r2
 80077be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	2b23      	cmp	r3, #35	; 0x23
 80077c4:	d84a      	bhi.n	800785c <CDC_Control_FS+0xac>
 80077c6:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <CDC_Control_FS+0x1c>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	0800785d 	.word	0x0800785d
 80077d0:	0800785d 	.word	0x0800785d
 80077d4:	0800785d 	.word	0x0800785d
 80077d8:	0800785d 	.word	0x0800785d
 80077dc:	0800785d 	.word	0x0800785d
 80077e0:	0800785d 	.word	0x0800785d
 80077e4:	0800785d 	.word	0x0800785d
 80077e8:	0800785d 	.word	0x0800785d
 80077ec:	0800785d 	.word	0x0800785d
 80077f0:	0800785d 	.word	0x0800785d
 80077f4:	0800785d 	.word	0x0800785d
 80077f8:	0800785d 	.word	0x0800785d
 80077fc:	0800785d 	.word	0x0800785d
 8007800:	0800785d 	.word	0x0800785d
 8007804:	0800785d 	.word	0x0800785d
 8007808:	0800785d 	.word	0x0800785d
 800780c:	0800785d 	.word	0x0800785d
 8007810:	0800785d 	.word	0x0800785d
 8007814:	0800785d 	.word	0x0800785d
 8007818:	0800785d 	.word	0x0800785d
 800781c:	0800785d 	.word	0x0800785d
 8007820:	0800785d 	.word	0x0800785d
 8007824:	0800785d 	.word	0x0800785d
 8007828:	0800785d 	.word	0x0800785d
 800782c:	0800785d 	.word	0x0800785d
 8007830:	0800785d 	.word	0x0800785d
 8007834:	0800785d 	.word	0x0800785d
 8007838:	0800785d 	.word	0x0800785d
 800783c:	0800785d 	.word	0x0800785d
 8007840:	0800785d 	.word	0x0800785d
 8007844:	0800785d 	.word	0x0800785d
 8007848:	0800785d 	.word	0x0800785d
 800784c:	0800785d 	.word	0x0800785d
 8007850:	0800785d 	.word	0x0800785d
 8007854:	0800785d 	.word	0x0800785d
 8007858:	0800785d 	.word	0x0800785d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800785c:	bf00      	nop
  }

  return (USBD_OK);
 800785e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	4805      	ldr	r0, [pc, #20]	; (8007890 <CDC_Receive_FS+0x24>)
 800787a:	f7fe fe6e 	bl	800655a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800787e:	4804      	ldr	r0, [pc, #16]	; (8007890 <CDC_Receive_FS+0x24>)
 8007880:	f7fe fe7f 	bl	8006582 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007884:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20000470 	.word	0x20000470

08007894 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2212      	movs	r2, #18
 80078a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80078a6:	4b03      	ldr	r3, [pc, #12]	; (80078b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	20000148 	.word	0x20000148

080078b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	6039      	str	r1, [r7, #0]
 80078c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2204      	movs	r2, #4
 80078c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078ca:	4b03      	ldr	r3, [pc, #12]	; (80078d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	2000015c 	.word	0x2000015c

080078dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4603      	mov	r3, r0
 80078e4:	6039      	str	r1, [r7, #0]
 80078e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d105      	bne.n	80078fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	4907      	ldr	r1, [pc, #28]	; (8007910 <USBD_FS_ProductStrDescriptor+0x34>)
 80078f2:	4808      	ldr	r0, [pc, #32]	; (8007914 <USBD_FS_ProductStrDescriptor+0x38>)
 80078f4:	f7ff fe31 	bl	800755a <USBD_GetString>
 80078f8:	e004      	b.n	8007904 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	4904      	ldr	r1, [pc, #16]	; (8007910 <USBD_FS_ProductStrDescriptor+0x34>)
 80078fe:	4805      	ldr	r0, [pc, #20]	; (8007914 <USBD_FS_ProductStrDescriptor+0x38>)
 8007900:	f7ff fe2b 	bl	800755a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007904:	4b02      	ldr	r3, [pc, #8]	; (8007910 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20000f04 	.word	0x20000f04
 8007914:	080080d0 	.word	0x080080d0

08007918 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	6039      	str	r1, [r7, #0]
 8007922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	4904      	ldr	r1, [pc, #16]	; (8007938 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007928:	4804      	ldr	r0, [pc, #16]	; (800793c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800792a:	f7ff fe16 	bl	800755a <USBD_GetString>
  return USBD_StrDesc;
 800792e:	4b02      	ldr	r3, [pc, #8]	; (8007938 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	20000f04 	.word	0x20000f04
 800793c:	080080e8 	.word	0x080080e8

08007940 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	221a      	movs	r2, #26
 8007950:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007952:	f000 f843 	bl	80079dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007956:	4b02      	ldr	r3, [pc, #8]	; (8007960 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	20000160 	.word	0x20000160

08007964 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	4603      	mov	r3, r0
 800796c:	6039      	str	r1, [r7, #0]
 800796e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007970:	79fb      	ldrb	r3, [r7, #7]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d105      	bne.n	8007982 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	4907      	ldr	r1, [pc, #28]	; (8007998 <USBD_FS_ConfigStrDescriptor+0x34>)
 800797a:	4808      	ldr	r0, [pc, #32]	; (800799c <USBD_FS_ConfigStrDescriptor+0x38>)
 800797c:	f7ff fded 	bl	800755a <USBD_GetString>
 8007980:	e004      	b.n	800798c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	4904      	ldr	r1, [pc, #16]	; (8007998 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007986:	4805      	ldr	r0, [pc, #20]	; (800799c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007988:	f7ff fde7 	bl	800755a <USBD_GetString>
  }
  return USBD_StrDesc;
 800798c:	4b02      	ldr	r3, [pc, #8]	; (8007998 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800798e:	4618      	mov	r0, r3
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	20000f04 	.word	0x20000f04
 800799c:	080080fc 	.word	0x080080fc

080079a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4603      	mov	r3, r0
 80079a8:	6039      	str	r1, [r7, #0]
 80079aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d105      	bne.n	80079be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	4907      	ldr	r1, [pc, #28]	; (80079d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079b6:	4808      	ldr	r0, [pc, #32]	; (80079d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079b8:	f7ff fdcf 	bl	800755a <USBD_GetString>
 80079bc:	e004      	b.n	80079c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	4904      	ldr	r1, [pc, #16]	; (80079d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079c2:	4805      	ldr	r0, [pc, #20]	; (80079d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079c4:	f7ff fdc9 	bl	800755a <USBD_GetString>
  }
  return USBD_StrDesc;
 80079c8:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20000f04 	.word	0x20000f04
 80079d8:	08008108 	.word	0x08008108

080079dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079e2:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <Get_SerialNum+0x44>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079e8:	4b0e      	ldr	r3, [pc, #56]	; (8007a24 <Get_SerialNum+0x48>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079ee:	4b0e      	ldr	r3, [pc, #56]	; (8007a28 <Get_SerialNum+0x4c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4413      	add	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a02:	2208      	movs	r2, #8
 8007a04:	4909      	ldr	r1, [pc, #36]	; (8007a2c <Get_SerialNum+0x50>)
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f814 	bl	8007a34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a0c:	2204      	movs	r2, #4
 8007a0e:	4908      	ldr	r1, [pc, #32]	; (8007a30 <Get_SerialNum+0x54>)
 8007a10:	68b8      	ldr	r0, [r7, #8]
 8007a12:	f000 f80f 	bl	8007a34 <IntToUnicode>
  }
}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	1ffff7ac 	.word	0x1ffff7ac
 8007a24:	1ffff7b0 	.word	0x1ffff7b0
 8007a28:	1ffff7b4 	.word	0x1ffff7b4
 8007a2c:	20000162 	.word	0x20000162
 8007a30:	20000172 	.word	0x20000172

08007a34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a42:	2300      	movs	r3, #0
 8007a44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]
 8007a4a:	e027      	b.n	8007a9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	0f1b      	lsrs	r3, r3, #28
 8007a50:	2b09      	cmp	r3, #9
 8007a52:	d80b      	bhi.n	8007a6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	0f1b      	lsrs	r3, r3, #28
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	4619      	mov	r1, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	440b      	add	r3, r1
 8007a64:	3230      	adds	r2, #48	; 0x30
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	e00a      	b.n	8007a82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	0f1b      	lsrs	r3, r3, #28
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	4619      	mov	r1, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	440b      	add	r3, r1
 8007a7c:	3237      	adds	r2, #55	; 0x37
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	4413      	add	r3, r2
 8007a92:	2200      	movs	r2, #0
 8007a94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	75fb      	strb	r3, [r7, #23]
 8007a9c:	7dfa      	ldrb	r2, [r7, #23]
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d3d3      	bcc.n	8007a4c <IntToUnicode+0x18>
  }
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
	...

08007ab4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08a      	sub	sp, #40	; 0x28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007abc:	f107 0314 	add.w	r3, r7, #20
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	605a      	str	r2, [r3, #4]
 8007ac6:	609a      	str	r2, [r3, #8]
 8007ac8:	60da      	str	r2, [r3, #12]
 8007aca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1c      	ldr	r2, [pc, #112]	; (8007b44 <HAL_PCD_MspInit+0x90>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d131      	bne.n	8007b3a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ad6:	4b1c      	ldr	r3, [pc, #112]	; (8007b48 <HAL_PCD_MspInit+0x94>)
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	4a1b      	ldr	r2, [pc, #108]	; (8007b48 <HAL_PCD_MspInit+0x94>)
 8007adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ae0:	6153      	str	r3, [r2, #20]
 8007ae2:	4b19      	ldr	r3, [pc, #100]	; (8007b48 <HAL_PCD_MspInit+0x94>)
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aea:	613b      	str	r3, [r7, #16]
 8007aec:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8007aee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007af4:	2302      	movs	r3, #2
 8007af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007afc:	2303      	movs	r3, #3
 8007afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8007b00:	230e      	movs	r3, #14
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b04:	f107 0314 	add.w	r3, r7, #20
 8007b08:	4619      	mov	r1, r3
 8007b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b0e:	f7f8 ff61 	bl	80009d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007b12:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <HAL_PCD_MspInit+0x94>)
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	4a0c      	ldr	r2, [pc, #48]	; (8007b48 <HAL_PCD_MspInit+0x94>)
 8007b18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b1c:	61d3      	str	r3, [r2, #28]
 8007b1e:	4b0a      	ldr	r3, [pc, #40]	; (8007b48 <HAL_PCD_MspInit+0x94>)
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	2014      	movs	r0, #20
 8007b30:	f7f8 ff19 	bl	8000966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8007b34:	2014      	movs	r0, #20
 8007b36:	f7f8 ff32 	bl	800099e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007b3a:	bf00      	nop
 8007b3c:	3728      	adds	r7, #40	; 0x28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	40005c00 	.word	0x40005c00
 8007b48:	40021000 	.word	0x40021000

08007b4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007b60:	4619      	mov	r1, r3
 8007b62:	4610      	mov	r0, r2
 8007b64:	f7fe fdc5 	bl	80066f2 <USBD_LL_SetupStage>
}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007b82:	78fa      	ldrb	r2, [r7, #3]
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	4613      	mov	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	440b      	add	r3, r1
 8007b90:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	78fb      	ldrb	r3, [r7, #3]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	f7fe fdf7 	bl	800678c <USBD_LL_DataOutStage>
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b082      	sub	sp, #8
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	440b      	add	r3, r1
 8007bc6:	333c      	adds	r3, #60	; 0x3c
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f7fe fe4e 	bl	800686e <USBD_LL_DataInStage>
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe ff61 	bl	8006ab0 <USBD_LL_SOF>
}
 8007bee:	bf00      	nop
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d001      	beq.n	8007c0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c0a:	f7f8 fc4b 	bl	80004a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c14:	7bfa      	ldrb	r2, [r7, #15]
 8007c16:	4611      	mov	r1, r2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe ff0e 	bl	8006a3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fec7 	bl	80069b8 <USBD_LL_Reset>
}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe ff09 	bl	8006a5a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c50:	4b04      	ldr	r3, [pc, #16]	; (8007c64 <HAL_PCD_SuspendCallback+0x30>)
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	4a03      	ldr	r2, [pc, #12]	; (8007c64 <HAL_PCD_SuspendCallback+0x30>)
 8007c56:	f043 0306 	orr.w	r3, r3, #6
 8007c5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	e000ed00 	.word	0xe000ed00

08007c68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe ff04 	bl	8006a84 <USBD_LL_Resume>
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007c8c:	4a28      	ldr	r2, [pc, #160]	; (8007d30 <USBD_LL_Init+0xac>)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a26      	ldr	r2, [pc, #152]	; (8007d30 <USBD_LL_Init+0xac>)
 8007c98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007c9c:	4b24      	ldr	r3, [pc, #144]	; (8007d30 <USBD_LL_Init+0xac>)
 8007c9e:	4a25      	ldr	r2, [pc, #148]	; (8007d34 <USBD_LL_Init+0xb0>)
 8007ca0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007ca2:	4b23      	ldr	r3, [pc, #140]	; (8007d30 <USBD_LL_Init+0xac>)
 8007ca4:	2208      	movs	r2, #8
 8007ca6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ca8:	4b21      	ldr	r3, [pc, #132]	; (8007d30 <USBD_LL_Init+0xac>)
 8007caa:	2202      	movs	r2, #2
 8007cac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cae:	4b20      	ldr	r3, [pc, #128]	; (8007d30 <USBD_LL_Init+0xac>)
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007cb4:	4b1e      	ldr	r3, [pc, #120]	; (8007d30 <USBD_LL_Init+0xac>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007cba:	4b1d      	ldr	r3, [pc, #116]	; (8007d30 <USBD_LL_Init+0xac>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007cc0:	481b      	ldr	r0, [pc, #108]	; (8007d30 <USBD_LL_Init+0xac>)
 8007cc2:	f7f9 f93f 	bl	8000f44 <HAL_PCD_Init>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007ccc:	f7f8 fbea 	bl	80004a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cd6:	2318      	movs	r3, #24
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2100      	movs	r1, #0
 8007cdc:	f7fa fdda 	bl	8002894 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ce6:	2358      	movs	r3, #88	; 0x58
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2180      	movs	r1, #128	; 0x80
 8007cec:	f7fa fdd2 	bl	8002894 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cf6:	23c0      	movs	r3, #192	; 0xc0
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2181      	movs	r1, #129	; 0x81
 8007cfc:	f7fa fdca 	bl	8002894 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	f7fa fdc1 	bl	8002894 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2182      	movs	r1, #130	; 0x82
 8007d20:	f7fa fdb8 	bl	8002894 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20001104 	.word	0x20001104
 8007d34:	40005c00 	.word	0x40005c00

08007d38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7f9 f9d6 	bl	8001100 <HAL_PCD_Start>
 8007d54:	4603      	mov	r3, r0
 8007d56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 f954 	bl	8008008 <USBD_Get_USB_Status>
 8007d60:	4603      	mov	r3, r0
 8007d62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	4608      	mov	r0, r1
 8007d78:	4611      	mov	r1, r2
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	70fb      	strb	r3, [r7, #3]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70bb      	strb	r3, [r7, #2]
 8007d84:	4613      	mov	r3, r2
 8007d86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d96:	78bb      	ldrb	r3, [r7, #2]
 8007d98:	883a      	ldrh	r2, [r7, #0]
 8007d9a:	78f9      	ldrb	r1, [r7, #3]
 8007d9c:	f7f9 faf2 	bl	8001384 <HAL_PCD_EP_Open>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f92e 	bl	8008008 <USBD_Get_USB_Status>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dd4:	78fa      	ldrb	r2, [r7, #3]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7f9 fb39 	bl	8001450 <HAL_PCD_EP_Close>
 8007dde:	4603      	mov	r3, r0
 8007de0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 f90f 	bl	8008008 <USBD_Get_USB_Status>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e12:	78fa      	ldrb	r2, [r7, #3]
 8007e14:	4611      	mov	r1, r2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7f9 fbfa 	bl	8001610 <HAL_PCD_EP_SetStall>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 f8f0 	bl	8008008 <USBD_Get_USB_Status>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e50:	78fa      	ldrb	r2, [r7, #3]
 8007e52:	4611      	mov	r1, r2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7f9 fc2d 	bl	80016b4 <HAL_PCD_EP_ClrStall>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 f8d1 	bl	8008008 <USBD_Get_USB_Status>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	da0c      	bge.n	8007eaa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e96:	68f9      	ldr	r1, [r7, #12]
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	00db      	lsls	r3, r3, #3
 8007ea2:	440b      	add	r3, r1
 8007ea4:	3302      	adds	r3, #2
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	e00b      	b.n	8007ec2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eb0:	68f9      	ldr	r1, [r7, #12]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	440b      	add	r3, r1
 8007ebc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007ec0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b084      	sub	sp, #16
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ee8:	78fa      	ldrb	r2, [r7, #3]
 8007eea:	4611      	mov	r1, r2
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7f9 fa24 	bl	800133a <HAL_PCD_SetAddress>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 f885 	bl	8008008 <USBD_Get_USB_Status>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	607a      	str	r2, [r7, #4]
 8007f16:	461a      	mov	r2, r3
 8007f18:	460b      	mov	r3, r1
 8007f1a:	72fb      	strb	r3, [r7, #11]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f2e:	893b      	ldrh	r3, [r7, #8]
 8007f30:	7af9      	ldrb	r1, [r7, #11]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	f7f9 fb29 	bl	800158a <HAL_PCD_EP_Transmit>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f862 	bl	8008008 <USBD_Get_USB_Status>
 8007f44:	4603      	mov	r3, r0
 8007f46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f48:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b086      	sub	sp, #24
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	460b      	mov	r3, r1
 8007f60:	72fb      	strb	r3, [r7, #11]
 8007f62:	4613      	mov	r3, r2
 8007f64:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f74:	893b      	ldrh	r3, [r7, #8]
 8007f76:	7af9      	ldrb	r1, [r7, #11]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	f7f9 fab1 	bl	80014e0 <HAL_PCD_EP_Receive>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 f83f 	bl	8008008 <USBD_Get_USB_Status>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007faa:	78fa      	ldrb	r2, [r7, #3]
 8007fac:	4611      	mov	r1, r2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7f9 fad3 	bl	800155a <HAL_PCD_EP_GetRxCount>
 8007fb4:	4603      	mov	r3, r0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007fc8:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <USBD_static_malloc+0x18>)
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	2000019c 	.word	0x2000019c

08007fdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]

}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	2b03      	cmp	r3, #3
 800801a:	d817      	bhi.n	800804c <USBD_Get_USB_Status+0x44>
 800801c:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <USBD_Get_USB_Status+0x1c>)
 800801e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008022:	bf00      	nop
 8008024:	08008035 	.word	0x08008035
 8008028:	0800803b 	.word	0x0800803b
 800802c:	08008041 	.word	0x08008041
 8008030:	08008047 	.word	0x08008047
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]
    break;
 8008038:	e00b      	b.n	8008052 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800803a:	2302      	movs	r3, #2
 800803c:	73fb      	strb	r3, [r7, #15]
    break;
 800803e:	e008      	b.n	8008052 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008040:	2301      	movs	r3, #1
 8008042:	73fb      	strb	r3, [r7, #15]
    break;
 8008044:	e005      	b.n	8008052 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008046:	2302      	movs	r3, #2
 8008048:	73fb      	strb	r3, [r7, #15]
    break;
 800804a:	e002      	b.n	8008052 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800804c:	2302      	movs	r3, #2
 800804e:	73fb      	strb	r3, [r7, #15]
    break;
 8008050:	bf00      	nop
  }
  return usb_status;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <__libc_init_array>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	4d0d      	ldr	r5, [pc, #52]	; (8008098 <__libc_init_array+0x38>)
 8008064:	4c0d      	ldr	r4, [pc, #52]	; (800809c <__libc_init_array+0x3c>)
 8008066:	1b64      	subs	r4, r4, r5
 8008068:	10a4      	asrs	r4, r4, #2
 800806a:	2600      	movs	r6, #0
 800806c:	42a6      	cmp	r6, r4
 800806e:	d109      	bne.n	8008084 <__libc_init_array+0x24>
 8008070:	4d0b      	ldr	r5, [pc, #44]	; (80080a0 <__libc_init_array+0x40>)
 8008072:	4c0c      	ldr	r4, [pc, #48]	; (80080a4 <__libc_init_array+0x44>)
 8008074:	f000 f820 	bl	80080b8 <_init>
 8008078:	1b64      	subs	r4, r4, r5
 800807a:	10a4      	asrs	r4, r4, #2
 800807c:	2600      	movs	r6, #0
 800807e:	42a6      	cmp	r6, r4
 8008080:	d105      	bne.n	800808e <__libc_init_array+0x2e>
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	f855 3b04 	ldr.w	r3, [r5], #4
 8008088:	4798      	blx	r3
 800808a:	3601      	adds	r6, #1
 800808c:	e7ee      	b.n	800806c <__libc_init_array+0xc>
 800808e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008092:	4798      	blx	r3
 8008094:	3601      	adds	r6, #1
 8008096:	e7f2      	b.n	800807e <__libc_init_array+0x1e>
 8008098:	08008148 	.word	0x08008148
 800809c:	08008148 	.word	0x08008148
 80080a0:	08008148 	.word	0x08008148
 80080a4:	0800814c 	.word	0x0800814c

080080a8 <memset>:
 80080a8:	4402      	add	r2, r0
 80080aa:	4603      	mov	r3, r0
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d100      	bne.n	80080b2 <memset+0xa>
 80080b0:	4770      	bx	lr
 80080b2:	f803 1b01 	strb.w	r1, [r3], #1
 80080b6:	e7f9      	b.n	80080ac <memset+0x4>

080080b8 <_init>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	bf00      	nop
 80080bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080be:	bc08      	pop	{r3}
 80080c0:	469e      	mov	lr, r3
 80080c2:	4770      	bx	lr

080080c4 <_fini>:
 80080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c6:	bf00      	nop
 80080c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ca:	bc08      	pop	{r3}
 80080cc:	469e      	mov	lr, r3
 80080ce:	4770      	bx	lr
